{
    "sourceFile": "pro-wind-calculator.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1736991868402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736991886244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n     const trajectoryFactor = trajectoryFactors[shotData.trajectory];\n \n     // Calculate total effects\n     const distance = parseInt(shotData.distance);\n-    const headWindAdjustment = headWindEffect * 0.5 * trajectoryFactor; // Headwind naturally reduces distance\n-    const crossWindAdjustment = -crossWindEffect * 0.8 * trajectoryFactor; // Positive crosswind pushes ball left\n+    const headWindAdjustment = -headWindEffect * 0.5 * trajectoryFactor; // yards per mph\n+    const crossWindAdjustment = crossWindEffect * 0.8 * trajectoryFactor; // yards per mph\n \n     // Determine wind type based on angle\n     const angleDegrees = (relativeAngle * 180) / Math.PI;\n     let windType = 'Crosswind';\n"
                }
            ],
            "date": 1736991868402,
            "name": "Commit-0",
            "content": "'use client'\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Wind, Target } from 'lucide-react';\n\ninterface TrajectoryFactors {\n  low: number;\n  medium: number;\n  high: number;\n}\n\ninterface EffectData {\n  windType: string;\n  headWindEffect: number;\n  crossWindEffect: number;\n  totalEffect: number;\n  adjustedDistance: number;\n  relativeAngle: number;\n  trajectoryFactor: number;\n}\n\nconst trajectoryFactors: TrajectoryFactors = {\n  low: 0.7,\n  medium: 1.0,\n  high: 1.3\n};\n\nconst ProWindCalculator = () => {\n  const [windData, setWindData] = useState({\n    speed: '',\n    direction: ''  // 0-360 degrees, 0 = N, 90 = E\n  });\n  \n  const [shotData, setShotData] = useState({\n    distance: '',\n    direction: '',  // 0-360 degrees, 0 = N, 90 = E\n    trajectory: 'medium' as keyof TrajectoryFactors  // low, medium, high\n  });\n\n  const [effectData, setEffectData] = useState<EffectData | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  const calculateWindEffect = () => {\n    if (!windData.speed || !windData.direction || !shotData.direction || !shotData.distance) {\n      return;\n    }\n\n    // Convert directions to radians and calculate relative angle\n    const windDir = (parseInt(windData.direction) * Math.PI) / 180;\n    const shotDir = (parseInt(shotData.direction) * Math.PI) / 180;\n    const relativeAngle = Math.abs(windDir - shotDir);\n\n    // Calculate head/tail and crosswind components\n    const windSpeed = parseFloat(windData.speed);\n    const headWindEffect = windSpeed * Math.cos(relativeAngle);\n    const crossWindEffect = windSpeed * Math.sin(relativeAngle);\n\n    // Trajectory factors\n    const trajectoryFactor = trajectoryFactors[shotData.trajectory];\n\n    // Calculate total effects\n    const distance = parseInt(shotData.distance);\n    const headWindAdjustment = headWindEffect * 0.5 * trajectoryFactor; // Headwind naturally reduces distance\n    const crossWindAdjustment = -crossWindEffect * 0.8 * trajectoryFactor; // Positive crosswind pushes ball left\n\n    // Determine wind type based on angle\n    const angleDegrees = (relativeAngle * 180) / Math.PI;\n    let windType = 'Crosswind';\n    if (angleDegrees <= 45 || angleDegrees >= 315) {\n      windType = 'Headwind';\n    } else if (angleDegrees >= 135 && angleDegrees <= 225) {\n      windType = 'Tailwind';\n    }\n\n    setEffectData({\n      windType,\n      headWindEffect: Math.round(headWindAdjustment),\n      crossWindEffect: Math.round(crossWindAdjustment),\n      totalEffect: Math.round(Math.sqrt(headWindAdjustment**2 + crossWindAdjustment**2)),\n      adjustedDistance: Math.round(distance + headWindAdjustment),\n      relativeAngle: Math.round(angleDegrees),\n      trajectoryFactor\n    });\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(centerX, centerY) - 40;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw compass circle\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);\n    ctx.strokeStyle = '#334155';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n\n    // Draw compass points\n    const directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];\n    directions.forEach((dir, i) => {\n      const angle = (i * Math.PI / 4) - Math.PI / 2;\n      const x = centerX + Math.cos(angle) * (radius + 20);\n      const y = centerY + Math.sin(angle) * (radius + 20);\n      \n      ctx.fillStyle = '#64748b';\n      ctx.font = '14px sans-serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(dir, x, y);\n    });\n\n    // Draw wind vector\n    if (windData.speed && windData.direction) {\n      const angle = (parseInt(windData.direction) + 90) * Math.PI / 180;\n      const length = Math.min(parseInt(windData.speed) * 5, radius);\n      \n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.lineTo(\n        centerX + Math.cos(angle) * length,\n        centerY + Math.sin(angle) * length\n      );\n      ctx.strokeStyle = '#10b981';\n      ctx.lineWidth = 3;\n      ctx.stroke();\n\n      // Wind arrow head\n      const headLen = 15;\n      ctx.beginPath();\n      ctx.moveTo(\n        centerX + Math.cos(angle) * length,\n        centerY + Math.sin(angle) * length\n      );\n      ctx.lineTo(\n        centerX + Math.cos(angle) * length - headLen * Math.cos(angle - Math.PI / 6),\n        centerY + Math.sin(angle) * length - headLen * Math.sin(angle - Math.PI / 6)\n      );\n      ctx.lineTo(\n        centerX + Math.cos(angle) * length - headLen * Math.cos(angle + Math.PI / 6),\n        centerY + Math.sin(angle) * length - headLen * Math.sin(angle + Math.PI / 6)\n      );\n      ctx.fillStyle = '#10b981';\n      ctx.fill();\n    }\n\n    // Draw shot direction\n    if (shotData.direction) {\n      const angle = (parseInt(shotData.direction) - 90) * Math.PI / 180;\n      const length = radius * 0.8;\n      \n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.lineTo(\n        centerX + Math.cos(angle) * length,\n        centerY + Math.sin(angle) * length\n      );\n      ctx.strokeStyle = '#eab308';\n      ctx.setLineDash([5, 5]);\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      ctx.setLineDash([]);\n\n      // Shot arrow head\n      const headLen = 12;\n      ctx.beginPath();\n      ctx.moveTo(\n        centerX + Math.cos(angle) * length,\n        centerY + Math.sin(angle) * length\n      );\n      ctx.lineTo(\n        centerX + Math.cos(angle) * length - headLen * Math.cos(angle - Math.PI / 6),\n        centerY + Math.sin(angle) * length - headLen * Math.sin(angle - Math.PI / 6)\n      );\n      ctx.lineTo(\n        centerX + Math.cos(angle) * length - headLen * Math.cos(angle + Math.PI / 6),\n        centerY + Math.sin(angle) * length - headLen * Math.sin(angle + Math.PI / 6)\n      );\n      ctx.fillStyle = '#eab308';\n      ctx.fill();\n    }\n  }, [windData, shotData]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 text-white p-6\">\n      <div className=\"max-w-md mx-auto\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <h1 className=\"text-2xl font-bold text-emerald-400\">Pro Wind Calculator</h1>\n          <div className=\"flex items-center gap-2 bg-emerald-500/20 px-3 py-1 rounded-lg\">\n            <div className=\"w-2 h-2 bg-emerald-500 rounded-full\"></div>\n            <span className=\"text-sm text-emerald-500\">PRO</span>\n          </div>\n        </div>\n\n        <div className=\"bg-gray-800/50 rounded-xl p-6 backdrop-blur-md border border-gray-700/50 mb-6\">\n          <div className=\"aspect-square mb-6\">\n            <canvas \n              ref={canvasRef}\n              width={400}\n              height={400}\n              className=\"w-full h-full\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-emerald-500 mb-1\">Wind Speed (mph)</label>\n              <input\n                type=\"number\"\n                value={windData.speed}\n                onChange={(e) => setWindData({...windData, speed: e.target.value})}\n                className=\"w-full bg-gray-900/50 border border-gray-700 rounded-lg p-3 text-emerald-300 focus:ring-2 focus:ring-emerald-500\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-emerald-500 mb-1\">Wind Direction (°)</label>\n              <input\n                type=\"number\"\n                value={windData.direction}\n                onChange={(e) => setWindData({...windData, direction: e.target.value})}\n                className=\"w-full bg-gray-900/50 border border-gray-700 rounded-lg p-3 text-emerald-300 focus:ring-2 focus:ring-emerald-500\"\n                min=\"0\"\n                max=\"360\"\n                placeholder=\"0-360°\"\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-4 p-3 bg-emerald-500/10 rounded-lg\">\n            <div className=\"flex items-center gap-2 text-sm text-emerald-400\">\n              <Wind size={16} />\n              <span>Wind direction indicates where the wind is coming FROM (0° = wind from North)</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-gray-800/50 rounded-xl p-6 backdrop-blur-md border border-gray-700/50 mb-6\">\n          <h3 className=\"text-xl font-semibold text-emerald-400 mb-4\">Shot Details</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-emerald-500 mb-1\">Shot Direction (°)</label>\n              <input\n                type=\"number\"\n                value={shotData.direction}\n                onChange={(e) => setShotData({...shotData, direction: e.target.value})}\n                className=\"w-full bg-gray-900/50 border border-gray-700 rounded-lg p-3 text-emerald-300 focus:ring-2 focus:ring-emerald-500\"\n                min=\"0\"\n                max=\"360\"\n                placeholder=\"0-360°\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-emerald-500 mb-1\">Shot Distance (yards)</label>\n              <input\n                type=\"number\"\n                value={shotData.distance}\n                onChange={(e) => setShotData({...shotData, distance: e.target.value})}\n                className=\"w-full bg-gray-900/50 border border-gray-700 rounded-lg p-3 text-emerald-300 focus:ring-2 focus:ring-emerald-500\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-emerald-500 mb-1\">Shot Trajectory</label>\n              <select\n                value={shotData.trajectory}\n                onChange={(e) => setShotData({...shotData, trajectory: e.target.value as keyof TrajectoryFactors})}\n                className=\"w-full bg-gray-900/50 border border-gray-700 rounded-lg p-3 text-emerald-300 focus:ring-2 focus:ring-emerald-500\"\n              >\n                <option value=\"low\">Low</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"high\">High</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {effectData && (\n          <div className=\"bg-gray-800/50 rounded-xl p-6 backdrop-blur-md border border-gray-700/50 mb-6\">\n            <h3 className=\"text-xl font-semibold text-emerald-400 mb-4\">Wind Effect</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-3 bg-gray-900/50 rounded-lg\">\n                <span className=\"text-emerald-400\">Wind Type:</span>\n                <span className=\"font-semibold\">{effectData.windType}</span>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-gray-900/50 rounded-lg\">\n                <span className=\"text-emerald-400\">Relative Angle:</span>\n                <span className=\"font-semibold\">{effectData.relativeAngle}°</span>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-gray-900/50 rounded-lg\">\n                <span className=\"text-emerald-400\">Trajectory Factor:</span>\n                <span className=\"font-semibold\">×{effectData.trajectoryFactor}</span>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-gray-900/50 rounded-lg\">\n                <span className=\"text-emerald-400\">Distance Effect:</span>\n                <span className={`font-semibold ${effectData.headWindEffect > 0 ? 'text-green-400' : 'text-red-400'}`}>\n                  {effectData.headWindEffect > 0 ? '+' : ''}{effectData.headWindEffect} yards\n                </span>\n              </div>\n              {Math.abs(effectData.crossWindEffect) > 0 && (\n                <div className=\"flex items-center justify-between p-3 bg-gray-900/50 rounded-lg\">\n                  <span className=\"text-emerald-400\">Side Effect:</span>\n                  <span className=\"font-semibold\">\n                    {Math.abs(effectData.crossWindEffect)} yards \n                    {effectData.crossWindEffect > 0 ? ' right' : ' left'}\n                  </span>\n                </div>\n              )}\n              <div className=\"flex items-center justify-between p-3 bg-gray-900/50 rounded-lg\">\n                <span className=\"text-emerald-400\">Adjusted Distance:</span>\n                <span className=\"font-semibold text-lg\">{effectData.adjustedDistance} yards</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <button \n          onClick={calculateWindEffect}\n          className=\"w-full bg-emerald-600 text-white py-4 rounded-xl font-semibold hover:bg-emerald-500 transition-colors flex items-center justify-center gap-2\"\n        >\n          <Target size={20} />\n          Calculate Wind Effect\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProWindCalculator;"
        }
    ]
}