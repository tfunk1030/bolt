{
    "sourceFile": "app/shot-calculator/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1736988651703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736988718023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,12 +49,13 @@\n     );\n \n     const adjustedYardage = result.carry_distance;\n     const standardDensity = 1.225; // kg/m³\n+    const currentDensity = conditions.density ?? standardDensity;\n \n     return {\n       adjustedYardage,\n-      densityEffect: ((conditions.density / standardDensity) - 1) * -targetYardage,\n+      densityEffect: ((currentDensity / standardDensity) - 1) * -targetYardage,\n       altitudeEffect: conditions.altitude * 0.00018 * targetYardage,\n       humidityEffect: (conditions.humidity - 50) * 0.0002 * targetYardage,\n       temperatureEffect: (conditions.temperature - 59) * 0.001 * targetYardage,\n       totalEffect: adjustedYardage - targetYardage\n"
                },
                {
                    "date": 1736988736168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+'use client'\n+\n+import { useState, useMemo, useEffect } from 'react'\n+import { useEnvironmental } from '@/lib/hooks/use-environmental'\n+import { useClubSettings } from '@/lib/club-settings-context'\n+import { usePremium } from '@/lib/premium-context'\n+import { useSettings } from '@/lib/settings-context'\n+import { useShotCalc } from '@/lib/shot-calc-context'\n+import { YardageModelEnhanced, SkillLevel } from '@/lib/yardage-model'\n+import { \n+  Target, \n+  Wind, \n+  Thermometer, \n+  Droplets, \n+  Mountain, \n+  Gauge,\n+  Lock\n+} from 'lucide-react'\n+\n+export default function ShotCalculatorPage() {\n+  const { conditions } = useEnvironmental()\n+  const { getRecommendedClub } = useClubSettings()\n+  const { isPremium, setShowUpgradeModal } = usePremium()\n+  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude } = useSettings()\n+  const { setShotCalcData } = useShotCalc()\n+  const [targetYardage, setTargetYardage] = useState(150)\n+  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n+  const [yardageModel] = useState(() => new YardageModelEnhanced())\n+\n+  // Calculate all adjustments in one memoized function\n+  const calculateAdjustments = () => {\n+    if (!conditions) return null;\n+\n+    // Set all environmental conditions\n+    yardageModel.set_conditions(\n+      conditions.temperature,\n+      conditions.altitude,\n+      0, // No wind in basic calculator\n+      0,\n+      conditions.pressure,\n+      conditions.humidity\n+    );\n+\n+    // Calculate adjusted distance\n+    const result = yardageModel.calculate_adjusted_yardage(\n+      targetYardage,\n+      SkillLevel.INTERMEDIATE,\n+      'driver'\n+    );\n+\n+    const adjustedYardage = result.carry_distance;\n+    const standardDensity = 1.225; // kg/m³\n+    const currentDensity = conditions.density ?? standardDensity;\n+\n+    return {\n+      adjustedYardage,\n+      densityEffect: ((currentDensity / standardDensity) - 1) * -targetYardage,\n+      altitudeEffect: conditions.altitude * 0.00018 * targetYardage,\n+      humidityEffect: (conditions.humidity - 50) * 0.0002 * targetYardage,\n+      temperatureEffect: (conditions.temperature - 59) * 0.001 * targetYardage,\n+      totalEffect: adjustedYardage - targetYardage\n+    };\n+  };\n+\n+  const adjustments = useMemo(() => calculateAdjustments(), [conditions, targetYardage])\n+\n+  // Update context only when needed\n+  useEffect(() => {\n+    const now = Date.now()\n+    if (lastUpdate && now - lastUpdate < 100) return;\n+\n+    if (conditions && adjustments) {\n+      setLastUpdate(now)\n+      setShotCalcData({\n+        targetYardage,\n+        elevation: conditions.altitude,\n+        temperature: conditions.temperature,\n+        humidity: conditions.humidity,\n+        pressure: conditions.pressure,\n+        adjustedDistance: adjustments.adjustedYardage\n+      })\n+    }\n+  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n+\n+  const recommendedClub = useMemo(() => \n+    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n+    [adjustments, getRecommendedClub]\n+  )\n+\n+  return (\n+    <div className=\"p-4 max-w-2xl mx-auto\">\n+      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n+\n+      {/* Target Distance Input */}\n+      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n+        <div className=\"flex items-center gap-4\">\n+          <input\n+            type=\"range\"\n+            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n+            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n+            value={targetYardage}\n+            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n+            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n+          />\n+          <div className=\"text-2xl font-bold w-32 text-right\">\n+            {formatDistance(targetYardage)}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Environmental Adjustments */}\n+      {adjustments && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n+          \n+          <div className=\"space-y-4\">\n+            {/* Air Density */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Air Density</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {conditions?.density?.toFixed(3)} kg/m³\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.densityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.densityEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Altitude */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Altitude</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {formatAltitude(conditions?.altitude || 0)}\n+                  </div>\n+                </div>\n+              </div>\n+              <div className=\"text-blue-400\">\n+                {formatDistance(adjustments.altitudeEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Temperature */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Temperature</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {formatTemperature(conditions?.temperature || 0)}\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.temperatureEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.temperatureEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Humidity */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Humidity</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {conditions?.humidity.toFixed(0)}%\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.humidityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.humidityEffect)}\n+              </div>\n+            </div>\n+\n+            <div className=\"h-px bg-gray-700 my-4\" />\n+\n+            {/* Total Adjustment */}\n+            <div className=\"flex items-center justify-between font-medium\">\n+              <div>Total Adjustment</div>\n+              <div className={`${adjustments.totalEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.totalEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Adjusted Distance */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n+              <div className=\"text-lg font-bold\">\n+                {formatDistance(adjustments.adjustedYardage)}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+\n+      {/* Club Recommendation */}\n+      {recommendedClub && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Target className=\"w-6 h-6 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n+                <div className=\"text-sm text-gray-400\">\n+                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+\n+      {/* Premium Feature Teaser */}\n+      {!isPremium && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n+          <div className=\"absolute top-3 right-3\">\n+            <Lock className=\"w-5 h-5 text-blue-400\" />\n+          </div>\n+          <div className=\"flex items-center gap-3 mb-4\">\n+            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+              <Wind className=\"w-5 h-5 text-blue-400\" />\n+            </div>\n+            <div>\n+              <h3 className=\"font-medium\">Wind Analysis</h3>\n+              <p className=\"text-sm text-gray-400\">\n+                Upgrade to get precise wind adjustments\n+              </p>\n+            </div>\n+          </div>\n+          <button\n+            onClick={() => setShowUpgradeModal(true)}\n+            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n+          >\n+            Upgrade to Premium\n+          </button>\n+        </div>\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736988976478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,298 @@\n+'use client'\n+\n+import { useState, useMemo, useEffect } from 'react'\n+import { useEnvironmental } from '@/lib/hooks/use-environmental'\n+import { useClubSettings } from '@/lib/club-settings-context'\n+import { usePremium } from '@/lib/premium-context'\n+import { useSettings } from '@/lib/settings-context'\n+import { useShotCalc } from '@/lib/shot-calc-context'\n+import { YardageModelEnhanced, SkillLevel } from '@/lib/yardage-model'\n+import { \n+  Target, \n+  Wind, \n+  Thermometer, \n+  Droplets, \n+  Mountain, \n+  Gauge,\n+  Lock\n+} from 'lucide-react'\n+\n+export default function ShotCalculatorPage() {\n+  const { conditions } = useEnvironmental()\n+  const { getRecommendedClub } = useClubSettings()\n+  const { isPremium, setShowUpgradeModal } = usePremium()\n+  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude } = useSettings()\n+  const { setShotCalcData } = useShotCalc()\n+  const [targetYardage, setTargetYardage] = useState(150)\n+  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n+  const [yardageModel] = useState(() => new YardageModelEnhanced())\n+\n+  // Calculate all adjustments in one memoized function\n+  const calculateAdjustments = () => {\n+    if (!conditions) return null;\n+\n+    // First calculate baseline yardage at standard conditions\n+    yardageModel.set_conditions(\n+      70, // Standard temperature\n+      0,  // Sea level\n+      0,  // No wind\n+      0,\n+      1013.25, // Standard pressure\n+      50  // Standard humidity\n+    );\n+\n+    const standardResult = yardageModel.calculate_adjusted_yardage(\n+      targetYardage,\n+      SkillLevel.INTERMEDIATE,\n+      'driver'\n+    );\n+\n+    // Then calculate with actual conditions\n+    yardageModel.set_conditions(\n+      conditions.temperature,\n+      conditions.altitude,\n+      0, // No wind in basic calculator\n+      0,\n+      conditions.pressure,\n+      conditions.humidity\n+    );\n+\n+    const actualResult = yardageModel.calculate_adjusted_yardage(\n+      targetYardage,\n+      SkillLevel.INTERMEDIATE,\n+      'driver'\n+    );\n+\n+    // Calculate individual effects by isolating each condition\n+    const densityOnlyResult = yardageModel.calculate_adjusted_yardage(\n+      targetYardage,\n+      SkillLevel.INTERMEDIATE,\n+      'driver',\n+      { isolate: 'density' }\n+    );\n+\n+    const altitudeOnlyResult = yardageModel.calculate_adjusted_yardage(\n+      targetYardage,\n+      SkillLevel.INTERMEDIATE,\n+      'driver',\n+      { isolate: 'altitude' }\n+    );\n+\n+    const temperatureOnlyResult = yardageModel.calculate_adjusted_yardage(\n+      targetYardage,\n+      SkillLevel.INTERMEDIATE,\n+      'driver',\n+      { isolate: 'temperature' }\n+    );\n+\n+    const humidityOnlyResult = yardageModel.calculate_adjusted_yardage(\n+      targetYardage,\n+      SkillLevel.INTERMEDIATE,\n+      'driver',\n+      { isolate: 'humidity' }\n+    );\n+\n+    return {\n+      adjustedYardage: actualResult.carry_distance,\n+      densityEffect: densityOnlyResult.carry_distance - standardResult.carry_distance,\n+      altitudeEffect: altitudeOnlyResult.carry_distance - standardResult.carry_distance,\n+      temperatureEffect: temperatureOnlyResult.carry_distance - standardResult.carry_distance,\n+      humidityEffect: humidityOnlyResult.carry_distance - standardResult.carry_distance,\n+      totalEffect: actualResult.carry_distance - targetYardage\n+    };\n+  };\n+\n+  const adjustments = useMemo(() => calculateAdjustments(), [conditions, targetYardage])\n+\n+  // Update context only when needed\n+  useEffect(() => {\n+    const now = Date.now()\n+    if (lastUpdate && now - lastUpdate < 100) return;\n+\n+    if (conditions && adjustments) {\n+      setLastUpdate(now)\n+      setShotCalcData({\n+        targetYardage,\n+        elevation: conditions.altitude,\n+        temperature: conditions.temperature,\n+        humidity: conditions.humidity,\n+        pressure: conditions.pressure,\n+        adjustedDistance: adjustments.adjustedYardage\n+      })\n+    }\n+  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n+\n+  const recommendedClub = useMemo(() => \n+    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n+    [adjustments, getRecommendedClub]\n+  )\n+\n+  return (\n+    <div className=\"p-4 max-w-2xl mx-auto\">\n+      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n+\n+      {/* Target Distance Input */}\n+      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n+        <div className=\"flex items-center gap-4\">\n+          <input\n+            type=\"range\"\n+            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n+            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n+            value={targetYardage}\n+            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n+            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n+          />\n+          <div className=\"text-2xl font-bold w-32 text-right\">\n+            {formatDistance(targetYardage)}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Environmental Adjustments */}\n+      {adjustments && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n+          \n+          <div className=\"space-y-4\">\n+            {/* Air Density */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Air Density</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {conditions?.density?.toFixed(3)} kg/m³\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.densityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.densityEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Altitude */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Altitude</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {formatAltitude(conditions?.altitude || 0)}\n+                  </div>\n+                </div>\n+              </div>\n+              <div className=\"text-blue-400\">\n+                {formatDistance(adjustments.altitudeEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Temperature */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Temperature</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {formatTemperature(conditions?.temperature || 0)}\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.temperatureEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.temperatureEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Humidity */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Humidity</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {conditions?.humidity.toFixed(0)}%\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.humidityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.humidityEffect)}\n+              </div>\n+            </div>\n+\n+            <div className=\"h-px bg-gray-700 my-4\" />\n+\n+            {/* Total Adjustment */}\n+            <div className=\"flex items-center justify-between font-medium\">\n+              <div>Total Adjustment</div>\n+              <div className={`${adjustments.totalEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.totalEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Adjusted Distance */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n+              <div className=\"text-lg font-bold\">\n+                {formatDistance(adjustments.adjustedYardage)}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+\n+      {/* Club Recommendation */}\n+      {recommendedClub && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Target className=\"w-6 h-6 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n+                <div className=\"text-sm text-gray-400\">\n+                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+\n+      {/* Premium Feature Teaser */}\n+      {!isPremium && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n+          <div className=\"absolute top-3 right-3\">\n+            <Lock className=\"w-5 h-5 text-blue-400\" />\n+          </div>\n+          <div className=\"flex items-center gap-3 mb-4\">\n+            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+              <Wind className=\"w-5 h-5 text-blue-400\" />\n+            </div>\n+            <div>\n+              <h3 className=\"font-medium\">Wind Analysis</h3>\n+              <p className=\"text-sm text-gray-400\">\n+                Upgrade to get precise wind adjustments\n+              </p>\n+            </div>\n+          </div>\n+          <button\n+            onClick={() => setShowUpgradeModal(true)}\n+            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n+          >\n+            Upgrade to Premium\n+          </button>\n+        </div>\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736989182278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,250 @@\n+'use client'\n+\n+import { useState, useMemo, useEffect } from 'react'\n+import { useEnvironmental } from '@/lib/hooks/use-environmental'\n+import { useClubSettings } from '@/lib/club-settings-context'\n+import { usePremium } from '@/lib/premium-context'\n+import { useSettings } from '@/lib/settings-context'\n+import { useShotCalc } from '@/lib/shot-calc-context'\n+import { YardageModelEnhanced, SkillLevel } from '@/lib/yardage-model'\n+import { \n+  Target, \n+  Wind, \n+  Thermometer, \n+  Droplets, \n+  Mountain, \n+  Gauge,\n+  Lock\n+} from 'lucide-react'\n+\n+export default function ShotCalculatorPage() {\n+  const { conditions } = useEnvironmental()\n+  const { getRecommendedClub } = useClubSettings()\n+  const { isPremium, setShowUpgradeModal } = usePremium()\n+  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude } = useSettings()\n+  const { setShotCalcData } = useShotCalc()\n+  const [targetYardage, setTargetYardage] = useState(150)\n+  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n+  const [yardageModel] = useState(() => new YardageModelEnhanced())\n+\n+  // Calculate all adjustments in one memoized function\n+  const calculateAdjustments = () => {\n+    if (!conditions) return null;\n+\n+    // Set all environmental conditions\n+    yardageModel.set_conditions(\n+      conditions.temperature,\n+      conditions.altitude,\n+      0, // No wind in basic calculator\n+      0,\n+      conditions.pressure,\n+      conditions.humidity\n+    );\n+\n+    // Calculate adjusted distance using the model's built-in physics\n+    const result = yardageModel.calculate_adjusted_yardage(\n+      targetYardage,\n+      SkillLevel.INTERMEDIATE,\n+      'driver'\n+    );\n+\n+    return {\n+      adjustedYardage: result.carry_distance,\n+      totalEffect: result.carry_distance - targetYardage\n+    };\n+  };\n+\n+  const adjustments = useMemo(() => calculateAdjustments(), [conditions, targetYardage])\n+\n+  // Update context only when needed\n+  useEffect(() => {\n+    const now = Date.now()\n+    if (lastUpdate && now - lastUpdate < 100) return;\n+\n+    if (conditions && adjustments) {\n+      setLastUpdate(now)\n+      setShotCalcData({\n+        targetYardage,\n+        elevation: conditions.altitude,\n+        temperature: conditions.temperature,\n+        humidity: conditions.humidity,\n+        pressure: conditions.pressure,\n+        adjustedDistance: adjustments.adjustedYardage\n+      })\n+    }\n+  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n+\n+  const recommendedClub = useMemo(() => \n+    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n+    [adjustments, getRecommendedClub]\n+  )\n+\n+  return (\n+    <div className=\"p-4 max-w-2xl mx-auto\">\n+      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n+\n+      {/* Target Distance Input */}\n+      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n+        <div className=\"flex items-center gap-4\">\n+          <input\n+            type=\"range\"\n+            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n+            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n+            value={targetYardage}\n+            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n+            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n+          />\n+          <div className=\"text-2xl font-bold w-32 text-right\">\n+            {formatDistance(targetYardage)}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Environmental Adjustments */}\n+      {adjustments && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n+          \n+          <div className=\"space-y-4\">\n+            {/* Air Density */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Air Density</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {conditions?.density?.toFixed(3)} kg/m³\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.densityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.densityEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Altitude */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Altitude</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {formatAltitude(conditions?.altitude || 0)}\n+                  </div>\n+                </div>\n+              </div>\n+              <div className=\"text-blue-400\">\n+                {formatDistance(adjustments.altitudeEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Temperature */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Temperature</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {formatTemperature(conditions?.temperature || 0)}\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.temperatureEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.temperatureEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Humidity */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"flex items-center gap-3\">\n+                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n+                </div>\n+                <div>\n+                  <div className=\"text-sm\">Humidity</div>\n+                  <div className=\"text-xs text-gray-400\">\n+                    {conditions?.humidity.toFixed(0)}%\n+                  </div>\n+                </div>\n+              </div>\n+              <div className={`${adjustments.humidityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.humidityEffect)}\n+              </div>\n+            </div>\n+\n+            <div className=\"h-px bg-gray-700 my-4\" />\n+\n+            {/* Total Adjustment */}\n+            <div className=\"flex items-center justify-between font-medium\">\n+              <div>Total Adjustment</div>\n+              <div className={`${adjustments.totalEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatDistance(adjustments.totalEffect)}\n+              </div>\n+            </div>\n+\n+            {/* Adjusted Distance */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n+              <div className=\"text-lg font-bold\">\n+                {formatDistance(adjustments.adjustedYardage)}\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+\n+      {/* Club Recommendation */}\n+      {recommendedClub && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Target className=\"w-6 h-6 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n+                <div className=\"text-sm text-gray-400\">\n+                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+\n+      {/* Premium Feature Teaser */}\n+      {!isPremium && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n+          <div className=\"absolute top-3 right-3\">\n+            <Lock className=\"w-5 h-5 text-blue-400\" />\n+          </div>\n+          <div className=\"flex items-center gap-3 mb-4\">\n+            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+              <Wind className=\"w-5 h-5 text-blue-400\" />\n+            </div>\n+            <div>\n+              <h3 className=\"font-medium\">Wind Analysis</h3>\n+              <p className=\"text-sm text-gray-400\">\n+                Upgrade to get precise wind adjustments\n+              </p>\n+            </div>\n+          </div>\n+          <button\n+            onClick={() => setShowUpgradeModal(true)}\n+            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n+          >\n+            Upgrade to Premium\n+          </button>\n+        </div>\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736989210481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,12 @@\n   Mountain, \n   Gauge,\n   Lock\n } from 'lucide-react'\n+import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\n+import { Input } from '@/components/ui/input'\n+import { Separator } from '@/components/ui/separator'\n+import { cn } from '@/lib/utils'\n \n export default function ShotCalculatorPage() {\n   const { conditions } = useEnvironmental()\n   const { getRecommendedClub } = useClubSettings()\n@@ -79,986 +83,54 @@\n     [adjustments, getRecommendedClub]\n   )\n \n   return (\n-    <div className=\"p-4 max-w-2xl mx-auto\">\n-      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n-\n-      {/* Target Distance Input */}\n-      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n-        <div className=\"flex items-center gap-4\">\n-          <input\n-            type=\"range\"\n-            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n-            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n-            value={targetYardage}\n-            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n-            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n-          />\n-          <div className=\"text-2xl font-bold w-32 text-right\">\n-            {formatDistance(targetYardage)}\n+    <div className=\"flex flex-col gap-6 pb-32\">\n+      <Card>\n+        <CardHeader>\n+          <CardTitle>Target Distance</CardTitle>\n+        </CardHeader>\n+        <CardContent>\n+          <div className=\"flex items-center gap-4\">\n+            <Input\n+              type=\"number\"\n+              value={targetYardage}\n+              onChange={(e) => setTargetYardage(Number(e.target.value))}\n+              className=\"w-24\"\n+            />\n+            <span className=\"text-muted-foreground\">yds</span>\n           </div>\n-        </div>\n-      </div>\n+        </CardContent>\n+      </Card>\n \n-      {/* Environmental Adjustments */}\n-      {adjustments && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n-          \n-          <div className=\"space-y-4\">\n-            {/* Air Density */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Air Density</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {conditions?.density?.toFixed(3)} kg/m³\n-                  </div>\n-                </div>\n+      {conditions && adjustments && (\n+        <Card>\n+          <CardHeader>\n+            <CardTitle>Shot Adjustments</CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <div className=\"flex flex-col gap-4\">\n+              <div className=\"flex items-center justify-between\">\n+                <span>Total Adjustment</span>\n+                <span className={cn(\n+                  \"font-mono\",\n+                  adjustments.totalEffect > 0 ? \"text-green-500\" : \n+                  adjustments.totalEffect < 0 ? \"text-red-500\" : \"\"\n+                )}>\n+                  {adjustments.totalEffect > 0 ? \"+\" : \"\"}\n+                  {adjustments.totalEffect} yds\n+                </span>\n               </div>\n-              <div className={`${adjustments.densityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.densityEffect)}\n+              <Separator />\n+              <div className=\"flex items-center justify-between\">\n+                <span>Playing Distance</span>\n+                <span className=\"font-mono\">\n+                  {adjustments.adjustedYardage} yds\n+                </span>\n               </div>\n             </div>\n-\n-            {/* Altitude */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Altitude</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {formatAltitude(conditions?.altitude || 0)}\n-                  </div>\n-                </div>\n-              </div>\n-              <div className=\"text-blue-400\">\n-                {formatDistance(adjustments.altitudeEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Temperature */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Temperature</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {formatTemperature(conditions?.temperature || 0)}\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.temperatureEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.temperatureEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Humidity */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Humidity</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {conditions?.humidity.toFixed(0)}%\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.humidityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.humidityEffect)}\n-              </div>\n-            </div>\n-\n-            <div className=\"h-px bg-gray-700 my-4\" />\n-\n-            {/* Total Adjustment */}\n-            <div className=\"flex items-center justify-between font-medium\">\n-              <div>Total Adjustment</div>\n-              <div className={`${adjustments.totalEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.totalEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Adjusted Distance */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n-              <div className=\"text-lg font-bold\">\n-                {formatDistance(adjustments.adjustedYardage)}\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n+          </CardContent>\n+        </Card>\n       )}\n-\n-      {/* Club Recommendation */}\n-      {recommendedClub && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Target className=\"w-6 h-6 text-blue-400\" />\n-              </div>\n-              <div>\n-                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n-                <div className=\"text-sm text-gray-400\">\n-                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n-                </div>\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-\n-      {/* Premium Feature Teaser */}\n-      {!isPremium && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n-          <div className=\"absolute top-3 right-3\">\n-            <Lock className=\"w-5 h-5 text-blue-400\" />\n-          </div>\n-          <div className=\"flex items-center gap-3 mb-4\">\n-            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-              <Wind className=\"w-5 h-5 text-blue-400\" />\n-            </div>\n-            <div>\n-              <h3 className=\"font-medium\">Wind Analysis</h3>\n-              <p className=\"text-sm text-gray-400\">\n-                Upgrade to get precise wind adjustments\n-              </p>\n-            </div>\n-          </div>\n-          <button\n-            onClick={() => setShowUpgradeModal(true)}\n-            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n-          >\n-            Upgrade to Premium\n-          </button>\n-        </div>\n-      )}\n     </div>\n   )\n-}\n-'use client'\n-\n-import { useState, useMemo, useEffect } from 'react'\n-import { useEnvironmental } from '@/lib/hooks/use-environmental'\n-import { useClubSettings } from '@/lib/club-settings-context'\n-import { usePremium } from '@/lib/premium-context'\n-import { useSettings } from '@/lib/settings-context'\n-import { useShotCalc } from '@/lib/shot-calc-context'\n-import { YardageModelEnhanced, SkillLevel } from '@/lib/yardage-model'\n-import { \n-  Target, \n-  Wind, \n-  Thermometer, \n-  Droplets, \n-  Mountain, \n-  Gauge,\n-  Lock\n-} from 'lucide-react'\n-\n-export default function ShotCalculatorPage() {\n-  const { conditions } = useEnvironmental()\n-  const { getRecommendedClub } = useClubSettings()\n-  const { isPremium, setShowUpgradeModal } = usePremium()\n-  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude } = useSettings()\n-  const { setShotCalcData } = useShotCalc()\n-  const [targetYardage, setTargetYardage] = useState(150)\n-  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n-  const [yardageModel] = useState(() => new YardageModelEnhanced())\n-\n-  // Calculate all adjustments in one memoized function\n-  const calculateAdjustments = () => {\n-    if (!conditions) return null;\n-\n-    // First calculate baseline yardage at standard conditions\n-    yardageModel.set_conditions(\n-      70, // Standard temperature\n-      0,  // Sea level\n-      0,  // No wind\n-      0,\n-      1013.25, // Standard pressure\n-      50  // Standard humidity\n-    );\n-\n-    const standardResult = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver'\n-    );\n-\n-    // Then calculate with actual conditions\n-    yardageModel.set_conditions(\n-      conditions.temperature,\n-      conditions.altitude,\n-      0, // No wind in basic calculator\n-      0,\n-      conditions.pressure,\n-      conditions.humidity\n-    );\n-\n-    const actualResult = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver'\n-    );\n-\n-    // Calculate individual effects by isolating each condition\n-    const densityOnlyResult = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver',\n-      { isolate: 'density' }\n-    );\n-\n-    const altitudeOnlyResult = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver',\n-      { isolate: 'altitude' }\n-    );\n-\n-    const temperatureOnlyResult = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver',\n-      { isolate: 'temperature' }\n-    );\n-\n-    const humidityOnlyResult = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver',\n-      { isolate: 'humidity' }\n-    );\n-\n-    return {\n-      adjustedYardage: actualResult.carry_distance,\n-      densityEffect: densityOnlyResult.carry_distance - standardResult.carry_distance,\n-      altitudeEffect: altitudeOnlyResult.carry_distance - standardResult.carry_distance,\n-      temperatureEffect: temperatureOnlyResult.carry_distance - standardResult.carry_distance,\n-      humidityEffect: humidityOnlyResult.carry_distance - standardResult.carry_distance,\n-      totalEffect: actualResult.carry_distance - targetYardage\n-    };\n-  };\n-\n-  const adjustments = useMemo(() => calculateAdjustments(), [conditions, targetYardage])\n-\n-  // Update context only when needed\n-  useEffect(() => {\n-    const now = Date.now()\n-    if (lastUpdate && now - lastUpdate < 100) return;\n-\n-    if (conditions && adjustments) {\n-      setLastUpdate(now)\n-      setShotCalcData({\n-        targetYardage,\n-        elevation: conditions.altitude,\n-        temperature: conditions.temperature,\n-        humidity: conditions.humidity,\n-        pressure: conditions.pressure,\n-        adjustedDistance: adjustments.adjustedYardage\n-      })\n-    }\n-  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n-\n-  const recommendedClub = useMemo(() => \n-    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n-    [adjustments, getRecommendedClub]\n-  )\n-\n-  return (\n-    <div className=\"p-4 max-w-2xl mx-auto\">\n-      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n-\n-      {/* Target Distance Input */}\n-      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n-        <div className=\"flex items-center gap-4\">\n-          <input\n-            type=\"range\"\n-            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n-            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n-            value={targetYardage}\n-            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n-            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n-          />\n-          <div className=\"text-2xl font-bold w-32 text-right\">\n-            {formatDistance(targetYardage)}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Environmental Adjustments */}\n-      {adjustments && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n-          \n-          <div className=\"space-y-4\">\n-            {/* Air Density */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Air Density</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {conditions?.density?.toFixed(3)} kg/m³\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.densityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.densityEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Altitude */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Altitude</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {formatAltitude(conditions?.altitude || 0)}\n-                  </div>\n-                </div>\n-              </div>\n-              <div className=\"text-blue-400\">\n-                {formatDistance(adjustments.altitudeEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Temperature */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Temperature</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {formatTemperature(conditions?.temperature || 0)}\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.temperatureEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.temperatureEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Humidity */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Humidity</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {conditions?.humidity.toFixed(0)}%\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.humidityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.humidityEffect)}\n-              </div>\n-            </div>\n-\n-            <div className=\"h-px bg-gray-700 my-4\" />\n-\n-            {/* Total Adjustment */}\n-            <div className=\"flex items-center justify-between font-medium\">\n-              <div>Total Adjustment</div>\n-              <div className={`${adjustments.totalEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.totalEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Adjusted Distance */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n-              <div className=\"text-lg font-bold\">\n-                {formatDistance(adjustments.adjustedYardage)}\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-\n-      {/* Club Recommendation */}\n-      {recommendedClub && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Target className=\"w-6 h-6 text-blue-400\" />\n-              </div>\n-              <div>\n-                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n-                <div className=\"text-sm text-gray-400\">\n-                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n-                </div>\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-\n-      {/* Premium Feature Teaser */}\n-      {!isPremium && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n-          <div className=\"absolute top-3 right-3\">\n-            <Lock className=\"w-5 h-5 text-blue-400\" />\n-          </div>\n-          <div className=\"flex items-center gap-3 mb-4\">\n-            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-              <Wind className=\"w-5 h-5 text-blue-400\" />\n-            </div>\n-            <div>\n-              <h3 className=\"font-medium\">Wind Analysis</h3>\n-              <p className=\"text-sm text-gray-400\">\n-                Upgrade to get precise wind adjustments\n-              </p>\n-            </div>\n-          </div>\n-          <button\n-            onClick={() => setShowUpgradeModal(true)}\n-            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n-          >\n-            Upgrade to Premium\n-          </button>\n-        </div>\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useMemo, useEffect } from 'react'\n-import { useEnvironmental } from '@/lib/hooks/use-environmental'\n-import { useClubSettings } from '@/lib/club-settings-context'\n-import { usePremium } from '@/lib/premium-context'\n-import { useSettings } from '@/lib/settings-context'\n-import { useShotCalc } from '@/lib/shot-calc-context'\n-import { YardageModelEnhanced, SkillLevel } from '@/lib/yardage-model'\n-import { \n-  Target, \n-  Wind, \n-  Thermometer, \n-  Droplets, \n-  Mountain, \n-  Gauge,\n-  Lock\n-} from 'lucide-react'\n-\n-export default function ShotCalculatorPage() {\n-  const { conditions } = useEnvironmental()\n-  const { getRecommendedClub } = useClubSettings()\n-  const { isPremium, setShowUpgradeModal } = usePremium()\n-  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude } = useSettings()\n-  const { setShotCalcData } = useShotCalc()\n-  const [targetYardage, setTargetYardage] = useState(150)\n-  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n-  const [yardageModel] = useState(() => new YardageModelEnhanced())\n-\n-  // Calculate all adjustments in one memoized function\n-  const calculateAdjustments = () => {\n-    if (!conditions) return null;\n-\n-    // Set all environmental conditions\n-    yardageModel.set_conditions(\n-      conditions.temperature,\n-      conditions.altitude,\n-      0, // No wind in basic calculator\n-      0,\n-      conditions.pressure,\n-      conditions.humidity\n-    );\n-\n-    // Calculate adjusted distance\n-    const result = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver'\n-    );\n-\n-    const adjustedYardage = result.carry_distance;\n-    const standardDensity = 1.225; // kg/m³\n-    const currentDensity = conditions.density ?? standardDensity;\n-\n-    return {\n-      adjustedYardage,\n-      densityEffect: ((currentDensity / standardDensity) - 1) * -targetYardage,\n-      altitudeEffect: conditions.altitude * 0.00018 * targetYardage,\n-      humidityEffect: (conditions.humidity - 50) * 0.0002 * targetYardage,\n-      temperatureEffect: (conditions.temperature - 59) * 0.001 * targetYardage,\n-      totalEffect: adjustedYardage - targetYardage\n-    };\n-  };\n-\n-  const adjustments = useMemo(() => calculateAdjustments(), [conditions, targetYardage])\n-\n-  // Update context only when needed\n-  useEffect(() => {\n-    const now = Date.now()\n-    if (lastUpdate && now - lastUpdate < 100) return;\n-\n-    if (conditions && adjustments) {\n-      setLastUpdate(now)\n-      setShotCalcData({\n-        targetYardage,\n-        elevation: conditions.altitude,\n-        temperature: conditions.temperature,\n-        humidity: conditions.humidity,\n-        pressure: conditions.pressure,\n-        adjustedDistance: adjustments.adjustedYardage\n-      })\n-    }\n-  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n-\n-  const recommendedClub = useMemo(() => \n-    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n-    [adjustments, getRecommendedClub]\n-  )\n-\n-  return (\n-    <div className=\"p-4 max-w-2xl mx-auto\">\n-      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n-\n-      {/* Target Distance Input */}\n-      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n-        <div className=\"flex items-center gap-4\">\n-          <input\n-            type=\"range\"\n-            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n-            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n-            value={targetYardage}\n-            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n-            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n-          />\n-          <div className=\"text-2xl font-bold w-32 text-right\">\n-            {formatDistance(targetYardage)}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Environmental Adjustments */}\n-      {adjustments && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n-          \n-          <div className=\"space-y-4\">\n-            {/* Air Density */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Air Density</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {conditions?.density?.toFixed(3)} kg/m³\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.densityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.densityEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Altitude */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Altitude</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {formatAltitude(conditions?.altitude || 0)}\n-                  </div>\n-                </div>\n-              </div>\n-              <div className=\"text-blue-400\">\n-                {formatDistance(adjustments.altitudeEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Temperature */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Temperature</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {formatTemperature(conditions?.temperature || 0)}\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.temperatureEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.temperatureEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Humidity */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Humidity</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {conditions?.humidity.toFixed(0)}%\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.humidityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.humidityEffect)}\n-              </div>\n-            </div>\n-\n-            <div className=\"h-px bg-gray-700 my-4\" />\n-\n-            {/* Total Adjustment */}\n-            <div className=\"flex items-center justify-between font-medium\">\n-              <div>Total Adjustment</div>\n-              <div className={`${adjustments.totalEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.totalEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Adjusted Distance */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n-              <div className=\"text-lg font-bold\">\n-                {formatDistance(adjustments.adjustedYardage)}\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-\n-      {/* Club Recommendation */}\n-      {recommendedClub && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Target className=\"w-6 h-6 text-blue-400\" />\n-              </div>\n-              <div>\n-                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n-                <div className=\"text-sm text-gray-400\">\n-                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n-                </div>\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-\n-      {/* Premium Feature Teaser */}\n-      {!isPremium && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n-          <div className=\"absolute top-3 right-3\">\n-            <Lock className=\"w-5 h-5 text-blue-400\" />\n-          </div>\n-          <div className=\"flex items-center gap-3 mb-4\">\n-            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-              <Wind className=\"w-5 h-5 text-blue-400\" />\n-            </div>\n-            <div>\n-              <h3 className=\"font-medium\">Wind Analysis</h3>\n-              <p className=\"text-sm text-gray-400\">\n-                Upgrade to get precise wind adjustments\n-              </p>\n-            </div>\n-          </div>\n-          <button\n-            onClick={() => setShowUpgradeModal(true)}\n-            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n-          >\n-            Upgrade to Premium\n-          </button>\n-        </div>\n-      )}\n-    </div>\n-  )\n-}\n-'use client'\n-\n-import { useState, useMemo, useEffect } from 'react'\n-import { useEnvironmental } from '@/lib/hooks/use-environmental'\n-import { useClubSettings } from '@/lib/club-settings-context'\n-import { usePremium } from '@/lib/premium-context'\n-import { useSettings } from '@/lib/settings-context'\n-import { useShotCalc } from '@/lib/shot-calc-context'\n-import { YardageModelEnhanced, SkillLevel } from '@/lib/yardage-model'\n-import { \n-  Target, \n-  Wind, \n-  Thermometer, \n-  Droplets, \n-  Mountain, \n-  Gauge,\n-  Lock\n-} from 'lucide-react'\n-\n-export default function ShotCalculatorPage() {\n-  const { conditions } = useEnvironmental()\n-  const { getRecommendedClub } = useClubSettings()\n-  const { isPremium, setShowUpgradeModal } = usePremium()\n-  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude } = useSettings()\n-  const { setShotCalcData } = useShotCalc()\n-  const [targetYardage, setTargetYardage] = useState(150)\n-  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n-  const [yardageModel] = useState(() => new YardageModelEnhanced())\n-\n-  // Calculate all adjustments in one memoized function\n-  const calculateAdjustments = () => {\n-    if (!conditions) return null;\n-\n-    // Set all environmental conditions\n-    yardageModel.set_conditions(\n-      conditions.temperature,\n-      conditions.altitude,\n-      0, // No wind in basic calculator\n-      0,\n-      conditions.pressure,\n-      conditions.humidity\n-    );\n-\n-    // Calculate adjusted distance\n-    const result = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver'\n-    );\n-\n-    const adjustedYardage = result.carry_distance;\n-    const standardDensity = 1.225; // kg/m³\n-    const currentDensity = conditions.density ?? standardDensity;\n-\n-    return {\n-      adjustedYardage,\n-      densityEffect: ((currentDensity / standardDensity) - 1) * -targetYardage,\n-      altitudeEffect: conditions.altitude * 0.00018 * targetYardage,\n-      humidityEffect: (conditions.humidity - 50) * 0.0002 * targetYardage,\n-      temperatureEffect: (conditions.temperature - 59) * 0.001 * targetYardage,\n-      totalEffect: adjustedYardage - targetYardage\n-    };\n-  };\n-\n-  const adjustments = useMemo(() => calculateAdjustments(), [conditions, targetYardage])\n-\n-  // Update context only when needed\n-  useEffect(() => {\n-    const now = Date.now()\n-    if (lastUpdate && now - lastUpdate < 100) return;\n-\n-    if (conditions && adjustments) {\n-      setLastUpdate(now)\n-      setShotCalcData({\n-        targetYardage,\n-        elevation: conditions.altitude,\n-        temperature: conditions.temperature,\n-        humidity: conditions.humidity,\n-        pressure: conditions.pressure,\n-        adjustedDistance: adjustments.adjustedYardage\n-      })\n-    }\n-  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n-\n-  const recommendedClub = useMemo(() => \n-    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n-    [adjustments, getRecommendedClub]\n-  )\n-\n-  return (\n-    <div className=\"p-4 max-w-2xl mx-auto\">\n-      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n-\n-      {/* Target Distance Input */}\n-      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n-        <div className=\"flex items-center gap-4\">\n-          <input\n-            type=\"range\"\n-            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n-            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n-            value={targetYardage}\n-            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n-            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n-          />\n-          <div className=\"text-2xl font-bold w-32 text-right\">\n-            {formatDistance(targetYardage)}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Environmental Adjustments */}\n-      {adjustments && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n-          \n-          <div className=\"space-y-4\">\n-            {/* Air Density */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Air Density</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {conditions?.density.toFixed(3)} kg/m³\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.densityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.densityEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Altitude */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Altitude</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {formatAltitude(conditions?.altitude || 0)}\n-                  </div>\n-                </div>\n-              </div>\n-              <div className=\"text-blue-400\">\n-                {formatDistance(adjustments.altitudeEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Temperature */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Temperature</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {formatTemperature(conditions?.temperature || 0)}\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.temperatureEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.temperatureEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Humidity */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"flex items-center gap-3\">\n-                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n-                </div>\n-                <div>\n-                  <div className=\"text-sm\">Humidity</div>\n-                  <div className=\"text-xs text-gray-400\">\n-                    {conditions?.humidity.toFixed(0)}%\n-                  </div>\n-                </div>\n-              </div>\n-              <div className={`${adjustments.humidityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.humidityEffect)}\n-              </div>\n-            </div>\n-\n-            <div className=\"h-px bg-gray-700 my-4\" />\n-\n-            {/* Total Adjustment */}\n-            <div className=\"flex items-center justify-between font-medium\">\n-              <div>Total Adjustment</div>\n-              <div className={`${adjustments.totalEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-                {formatDistance(adjustments.totalEffect)}\n-              </div>\n-            </div>\n-\n-            {/* Adjusted Distance */}\n-            <div className=\"flex items-center justify-between\">\n-              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n-              <div className=\"text-lg font-bold\">\n-                {formatDistance(adjustments.adjustedYardage)}\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-\n-      {/* Club Recommendation */}\n-      {recommendedClub && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Target className=\"w-6 h-6 text-blue-400\" />\n-              </div>\n-              <div>\n-                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n-                <div className=\"text-sm text-gray-400\">\n-                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n-                </div>\n-              </div>\n-            </div>\n-          </div>\n-        </div>\n-      )}\n-\n-      {/* Premium Feature Teaser */}\n-      {!isPremium && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n-          <div className=\"absolute top-3 right-3\">\n-            <Lock className=\"w-5 h-5 text-blue-400\" />\n-          </div>\n-          <div className=\"flex items-center gap-3 mb-4\">\n-            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-              <Wind className=\"w-5 h-5 text-blue-400\" />\n-            </div>\n-            <div>\n-              <h3 className=\"font-medium\">Wind Analysis</h3>\n-              <p className=\"text-sm text-gray-400\">\n-                Upgrade to get precise wind adjustments\n-              </p>\n-            </div>\n-          </div>\n-          <button\n-            onClick={() => setShowUpgradeModal(true)}\n-            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n-          >\n-            Upgrade to Premium\n-          </button>\n-        </div>\n-      )}\n-    </div>\n-  )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736989522645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,15 @@\n   )\n \n   return (\n     <div className=\"flex flex-col gap-6 pb-32\">\n+      {/* Target Distance Card */}\n       <Card>\n         <CardHeader>\n-          <CardTitle>Target Distance</CardTitle>\n+          <CardTitle className=\"flex items-center gap-2\">\n+            <Target className=\"w-5 h-5\" />\n+            Target Distance\n+          </CardTitle>\n         </CardHeader>\n         <CardContent>\n           <div className=\"flex items-center gap-4\">\n             <Input\n@@ -101,12 +105,60 @@\n           </div>\n         </CardContent>\n       </Card>\n \n+      {/* Environmental Conditions Card */}\n+      {conditions && (\n+        <Card>\n+          <CardHeader>\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <Thermometer className=\"w-5 h-5\" />\n+              Environmental Conditions\n+            </CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n+              <div className=\"bg-gray-800/50 p-3 rounded-lg\">\n+                <div className=\"flex items-center gap-2 mb-1\">\n+                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n+                  <span className=\"text-sm text-gray-400\">Temperature</span>\n+                </div>\n+                <div className=\"text-lg\">{formatTemperature(conditions.temperature)}</div>\n+              </div>\n+              <div className=\"bg-gray-800/50 p-3 rounded-lg\">\n+                <div className=\"flex items-center gap-2 mb-1\">\n+                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n+                  <span className=\"text-sm text-gray-400\">Humidity</span>\n+                </div>\n+                <div className=\"text-lg\">{conditions.humidity}%</div>\n+              </div>\n+              <div className=\"bg-gray-800/50 p-3 rounded-lg\">\n+                <div className=\"flex items-center gap-2 mb-1\">\n+                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n+                  <span className=\"text-sm text-gray-400\">Altitude</span>\n+                </div>\n+                <div className=\"text-lg\">{formatAltitude(conditions.altitude)}</div>\n+              </div>\n+              <div className=\"bg-gray-800/50 p-3 rounded-lg\">\n+                <div className=\"flex items-center gap-2 mb-1\">\n+                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n+                  <span className=\"text-sm text-gray-400\">Pressure</span>\n+                </div>\n+                <div className=\"text-lg\">{conditions.pressure} mb</div>\n+              </div>\n+            </div>\n+          </CardContent>\n+        </Card>\n+      )}\n+\n+      {/* Shot Adjustments Card */}\n       {conditions && adjustments && (\n         <Card>\n           <CardHeader>\n-            <CardTitle>Shot Adjustments</CardTitle>\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <Target className=\"w-5 h-5\" />\n+              Shot Adjustments\n+            </CardTitle>\n           </CardHeader>\n           <CardContent>\n             <div className=\"flex flex-col gap-4\">\n               <div className=\"flex items-center justify-between\">\n@@ -126,11 +178,53 @@\n                 <span className=\"font-mono\">\n                   {adjustments.adjustedYardage} yds\n                 </span>\n               </div>\n+              {recommendedClub && (\n+                <>\n+                  <Separator />\n+                  <div className=\"flex items-center justify-between\">\n+                    <span>Recommended Club</span>\n+                    <span className=\"font-mono\">\n+                      {recommendedClub}\n+                    </span>\n+                  </div>\n+                </>\n+              )}\n             </div>\n           </CardContent>\n         </Card>\n       )}\n+\n+      {/* Premium Features Teaser */}\n+      {!isPremium && (\n+        <Card className=\"bg-gradient-to-br from-blue-500/10 to-purple-500/10 border-blue-500/20\">\n+          <CardHeader>\n+            <CardTitle className=\"flex items-center gap-2\">\n+              <Lock className=\"w-5 h-5\" />\n+              Premium Features\n+            </CardTitle>\n+          </CardHeader>\n+          <CardContent>\n+            <div className=\"flex flex-col gap-4\">\n+              <p className=\"text-gray-400\">\n+                Upgrade to access advanced features:\n+              </p>\n+              <ul className=\"list-disc list-inside text-gray-400 space-y-2\">\n+                <li>Wind adjustments</li>\n+                <li>Shot shape optimization</li>\n+                <li>Club-specific calculations</li>\n+                <li>Historical shot tracking</li>\n+              </ul>\n+              <button\n+                onClick={() => setShowUpgradeModal(true)}\n+                className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors\"\n+              >\n+                Upgrade Now\n+              </button>\n+            </div>\n+          </CardContent>\n+        </Card>\n+      )}\n     </div>\n   )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736989535776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n                   <Separator />\n                   <div className=\"flex items-center justify-between\">\n                     <span>Recommended Club</span>\n                     <span className=\"font-mono\">\n-                      {recommendedClub}\n+                      {String(recommendedClub)}\n                     </span>\n                   </div>\n                 </>\n               )}\n"
                },
                {
                    "date": 1736989680714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n 'use client'\n \n-import { useState, useMemo, useEffect } from 'react'\n+import { useState, useMemo, useEffect, useCallback } from 'react'\n import { useEnvironmental } from '@/lib/hooks/use-environmental'\n import { useClubSettings } from '@/lib/club-settings-context'\n import { usePremium } from '@/lib/premium-context'\n import { useSettings } from '@/lib/settings-context'\n import { useShotCalc } from '@/lib/shot-calc-context'\n-import { YardageModelEnhanced, SkillLevel } from '@/lib/yardage-model'\n import { \n   Target, \n   Wind, \n   Thermometer, \n@@ -15,54 +14,50 @@\n   Mountain, \n   Gauge,\n   Lock\n } from 'lucide-react'\n-import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\n-import { Input } from '@/components/ui/input'\n-import { Separator } from '@/components/ui/separator'\n-import { cn } from '@/lib/utils'\n \n export default function ShotCalculatorPage() {\n   const { conditions } = useEnvironmental()\n-  const { getRecommendedClub } = useClubSettings()\n+  const { getRecommendedClub, clubs } = useClubSettings()\n   const { isPremium, setShowUpgradeModal } = usePremium()\n-  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude } = useSettings()\n+  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude, convertAltitude } = useSettings()\n   const { setShotCalcData } = useShotCalc()\n   const [targetYardage, setTargetYardage] = useState(150)\n   const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n-  const [yardageModel] = useState(() => new YardageModelEnhanced())\n \n   // Calculate all adjustments in one memoized function\n-  const calculateAdjustments = () => {\n+  const calculateAdjustments = useCallback(() => {\n     if (!conditions) return null;\n \n-    // Set all environmental conditions\n-    yardageModel.set_conditions(\n-      conditions.temperature,\n-      conditions.altitude,\n-      0, // No wind in basic calculator\n-      0,\n-      conditions.pressure,\n-      conditions.humidity\n-    );\n+    const altitudeInMeters = settings.altitudeUnit === 'feet' \n+      ? convertAltitude(conditions.altitude, 'meters')\n+      : conditions.altitude\n \n-    // Calculate adjusted distance using the model's built-in physics\n-    const result = yardageModel.calculate_adjusted_yardage(\n-      targetYardage,\n-      SkillLevel.INTERMEDIATE,\n-      'driver'\n-    );\n+    const densityEffect = (conditions.density - 1.225) * targetYardage * 0.1\n+    const altitudeEffect = altitudeInMeters * 0.00018 * targetYardage\n+    const humidityEffect = (conditions.humidity - 50) * 0.0002 * targetYardage\n+    const temperatureEffect = (conditions.temperature - 20) * 0.001 * targetYardage\n \n+    const totalEffect = densityEffect + altitudeEffect + humidityEffect + temperatureEffect\n+    const adjustedYardage = targetYardage + totalEffect\n+\n     return {\n-      adjustedYardage: result.carry_distance,\n-      totalEffect: result.carry_distance - targetYardage\n-    };\n-  };\n+      adjustedYardage,\n+      densityEffect,\n+      altitudeEffect,\n+      humidityEffect,\n+      temperatureEffect,\n+      totalEffect\n+    }\n+  }, [conditions, targetYardage, settings.altitudeUnit, convertAltitude])\n \n-  const adjustments = useMemo(() => calculateAdjustments(), [conditions, targetYardage])\n+  // Memoize the results\n+  const adjustments = useMemo(() => calculateAdjustments(), [calculateAdjustments])\n \n   // Update context only when needed\n   useEffect(() => {\n+    // Prevent multiple updates in the same render cycle\n     const now = Date.now()\n     if (lastUpdate && now - lastUpdate < 100) return;\n \n     if (conditions && adjustments) {\n@@ -82,149 +77,193 @@\n     adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n     [adjustments, getRecommendedClub]\n   )\n \n+  if (!conditions) {\n+    return (\n+      <div className=\"min-h-screen bg-gray-900 text-white p-8\">\n+        <div className=\"animate-pulse\">\n+          <div className=\"h-8 bg-gray-800 rounded w-1/4 mb-4\"></div>\n+          <div className=\"h-64 bg-gray-800 rounded mb-4\"></div>\n+          <div className=\"h-8 bg-gray-800 rounded w-1/2\"></div>\n+        </div>\n+      </div>\n+    )\n+  }\n+\n+  const formatAdjustment = (yards: number) => {\n+    const value = settings.distanceUnit === 'meters' \n+      ? convertDistance(Math.abs(yards), 'meters')\n+      : Math.abs(yards)\n+    \n+    return `${yards >= 0 ? '+' : '-'}${Math.round(value)} ${\n+      settings.distanceUnit === 'yards' ? 'yds' : 'm'\n+    }`\n+  }\n+\n   return (\n-    <div className=\"flex flex-col gap-6 pb-32\">\n-      {/* Target Distance Card */}\n-      <Card>\n-        <CardHeader>\n-          <CardTitle className=\"flex items-center gap-2\">\n-            <Target className=\"w-5 h-5\" />\n-            Target Distance\n-          </CardTitle>\n-        </CardHeader>\n-        <CardContent>\n-          <div className=\"flex items-center gap-4\">\n-            <Input\n-              type=\"number\"\n-              value={targetYardage}\n-              onChange={(e) => setTargetYardage(Number(e.target.value))}\n-              className=\"w-24\"\n-            />\n-            <span className=\"text-muted-foreground\">yds</span>\n+    <div className=\"p-4 max-w-2xl mx-auto\">\n+      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n+\n+      {/* Target Distance Input */}\n+      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n+        <div className=\"flex items-center gap-4\">\n+          <input\n+            type=\"range\"\n+            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n+            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n+            value={targetYardage}\n+            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n+            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:bg-blue-500 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:cursor-pointer [&::-webkit-slider-thumb]:shadow-lg [&::-webkit-slider-thumb]:shadow-blue-500/50 [&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:bg-blue-500 [&::-moz-range-thumb]:border-0 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:cursor-pointer [&::-moz-range-thumb]:shadow-lg [&::-moz-range-thumb]:shadow-blue-500/50\"\n+          />\n+          <div className=\"text-2xl font-bold w-32 text-right\">\n+            {formatDistance(targetYardage)}\n           </div>\n-        </CardContent>\n-      </Card>\n+        </div>\n+      </div>\n \n-      {/* Environmental Conditions Card */}\n-      {conditions && (\n-        <Card>\n-          <CardHeader>\n-            <CardTitle className=\"flex items-center gap-2\">\n-              <Thermometer className=\"w-5 h-5\" />\n-              Environmental Conditions\n-            </CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n-              <div className=\"bg-gray-800/50 p-3 rounded-lg\">\n-                <div className=\"flex items-center gap-2 mb-1\">\n-                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n-                  <span className=\"text-sm text-gray-400\">Temperature</span>\n+      {/* Environmental Adjustments */}\n+      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+        <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n+        \n+        <div className=\"space-y-4\">\n+          {/* Air Density */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Gauge className=\"w-4 h-4 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-sm\">Air Density</div>\n+                <div className=\"text-xs text-gray-400\">\n+                  {conditions.density.toFixed(3)} kg/m³\n                 </div>\n-                <div className=\"text-lg\">{formatTemperature(conditions.temperature)}</div>\n               </div>\n-              <div className=\"bg-gray-800/50 p-3 rounded-lg\">\n-                <div className=\"flex items-center gap-2 mb-1\">\n-                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n-                  <span className=\"text-sm text-gray-400\">Humidity</span>\n+            </div>\n+            <div className={`${(adjustments?.densityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+              {formatAdjustment(adjustments?.densityEffect ?? 0)}\n+            </div>\n+          </div>\n+\n+          {/* Altitude */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Mountain className=\"w-4 h-4 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-sm\">Altitude</div>\n+                <div className=\"text-xs text-gray-400\">\n+                  {formatAltitude(conditions.altitude)}\n                 </div>\n-                <div className=\"text-lg\">{conditions.humidity}%</div>\n               </div>\n-              <div className=\"bg-gray-800/50 p-3 rounded-lg\">\n-                <div className=\"flex items-center gap-2 mb-1\">\n-                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n-                  <span className=\"text-sm text-gray-400\">Altitude</span>\n+            </div>\n+            <div className=\"text-blue-400\">\n+              {adjustments && formatAdjustment(adjustments.altitudeEffect)}\n+            </div>\n+          </div>\n+\n+          {/* Temperature */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Thermometer className=\"w-4 h-4 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-sm\">Temperature</div>\n+                <div className=\"text-xs text-gray-400\">\n+                  {formatTemperature(conditions.temperature)}\n                 </div>\n-                <div className=\"text-lg\">{formatAltitude(conditions.altitude)}</div>\n               </div>\n-              <div className=\"bg-gray-800/50 p-3 rounded-lg\">\n-                <div className=\"flex items-center gap-2 mb-1\">\n-                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n-                  <span className=\"text-sm text-gray-400\">Pressure</span>\n+            </div>\n+            <div className={`${(adjustments?.temperatureEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+              {formatAdjustment(adjustments?.temperatureEffect ?? 0)}\n+            </div>\n+          </div>\n+\n+          {/* Humidity */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Droplets className=\"w-4 h-4 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-sm\">Humidity</div>\n+                <div className=\"text-xs text-gray-400\">\n+                  {conditions.humidity.toFixed(0)}%\n                 </div>\n-                <div className=\"text-lg\">{conditions.pressure} mb</div>\n               </div>\n             </div>\n-          </CardContent>\n-        </Card>\n-      )}\n+            <div className={`${(adjustments?.humidityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+              {formatAdjustment(adjustments?.humidityEffect ?? 0)}\n+            </div>\n+          </div>\n \n-      {/* Shot Adjustments Card */}\n-      {conditions && adjustments && (\n-        <Card>\n-          <CardHeader>\n-            <CardTitle className=\"flex items-center gap-2\">\n-              <Target className=\"w-5 h-5\" />\n-              Shot Adjustments\n-            </CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <div className=\"flex flex-col gap-4\">\n-              <div className=\"flex items-center justify-between\">\n-                <span>Total Adjustment</span>\n-                <span className={cn(\n-                  \"font-mono\",\n-                  adjustments.totalEffect > 0 ? \"text-green-500\" : \n-                  adjustments.totalEffect < 0 ? \"text-red-500\" : \"\"\n-                )}>\n-                  {adjustments.totalEffect > 0 ? \"+\" : \"\"}\n-                  {adjustments.totalEffect} yds\n-                </span>\n+          <div className=\"h-px bg-gray-700 my-4\" />\n+\n+          {/* Total Adjustment */}\n+          <div className=\"flex items-center justify-between font-medium\">\n+            <div>Total Adjustment</div>\n+            <div className={`${(adjustments?.totalEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+              {formatAdjustment(adjustments?.totalEffect ?? 0)}\n+            </div>\n+          </div>\n+\n+          {/* Adjusted Distance */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"text-sm text-gray-400\">Playing Distance</div>\n+            <div className=\"text-lg font-bold\">\n+              {adjustments && formatDistance(adjustments.adjustedYardage)}\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Club Recommendation */}\n+      {recommendedClub && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Target className=\"w-6 h-6 text-blue-400\" />\n               </div>\n-              <Separator />\n-              <div className=\"flex items-center justify-between\">\n-                <span>Playing Distance</span>\n-                <span className=\"font-mono\">\n-                  {adjustments.adjustedYardage} yds\n-                </span>\n+              <div>\n+                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n+                <div className=\"text-sm text-gray-400\">\n+                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n+                </div>\n               </div>\n-              {recommendedClub && (\n-                <>\n-                  <Separator />\n-                  <div className=\"flex items-center justify-between\">\n-                    <span>Recommended Club</span>\n-                    <span className=\"font-mono\">\n-                      {String(recommendedClub)}\n-                    </span>\n-                  </div>\n-                </>\n-              )}\n             </div>\n-          </CardContent>\n-        </Card>\n+          </div>\n+        </div>\n       )}\n \n-      {/* Premium Features Teaser */}\n+      {/* Premium Feature Teaser */}\n       {!isPremium && (\n-        <Card className=\"bg-gradient-to-br from-blue-500/10 to-purple-500/10 border-blue-500/20\">\n-          <CardHeader>\n-            <CardTitle className=\"flex items-center gap-2\">\n-              <Lock className=\"w-5 h-5\" />\n-              Premium Features\n-            </CardTitle>\n-          </CardHeader>\n-          <CardContent>\n-            <div className=\"flex flex-col gap-4\">\n-              <p className=\"text-gray-400\">\n-                Upgrade to access advanced features:\n+        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n+          <div className=\"absolute top-3 right-3\">\n+            <Lock className=\"w-5 h-5 text-blue-400\" />\n+          </div>\n+          <div className=\"flex items-center gap-3 mb-4\">\n+            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+              <Wind className=\"w-5 h-5 text-blue-400\" />\n+            </div>\n+            <div>\n+              <h3 className=\"font-medium\">Wind Analysis</h3>\n+              <p className=\"text-sm text-gray-400\">\n+                Upgrade to get precise wind adjustments\n               </p>\n-              <ul className=\"list-disc list-inside text-gray-400 space-y-2\">\n-                <li>Wind adjustments</li>\n-                <li>Shot shape optimization</li>\n-                <li>Club-specific calculations</li>\n-                <li>Historical shot tracking</li>\n-              </ul>\n-              <button\n-                onClick={() => setShowUpgradeModal(true)}\n-                className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors\"\n-              >\n-                Upgrade Now\n-              </button>\n             </div>\n-          </CardContent>\n-        </Card>\n+          </div>\n+          <button\n+            onClick={() => setShowUpgradeModal(true)}\n+            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n+          >\n+            Upgrade to Premium\n+          </button>\n+        </div>\n       )}\n     </div>\n   )\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736989694132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n \n   // Calculate all adjustments in one memoized function\n   const calculateAdjustments = useCallback(() => {\n-    if (!conditions) return null;\n+    if (!conditions || !conditions.density) return null;\n \n     const altitudeInMeters = settings.altitudeUnit === 'feet' \n       ? convertAltitude(conditions.altitude, 'meters')\n       : conditions.altitude\n@@ -135,9 +135,9 @@\n               </div>\n               <div>\n                 <div className=\"text-sm\">Air Density</div>\n                 <div className=\"text-xs text-gray-400\">\n-                  {conditions.density.toFixed(3)} kg/m³\n+                  {conditions.density?.toFixed(3) ?? 'N/A'} kg/m³\n                 </div>\n               </div>\n             </div>\n             <div className={`${(adjustments?.densityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n"
                },
                {
                    "date": 1736989757495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,269 @@\n+'use client'\n+\n+import { useState, useMemo, useEffect, useCallback } from 'react'\n+import { useEnvironmental } from '@/lib/hooks/use-environmental'\n+import { useClubSettings } from '@/lib/club-settings-context'\n+import { usePremium } from '@/lib/premium-context'\n+import { useSettings } from '@/lib/settings-context'\n+import { useShotCalc } from '@/lib/shot-calc-context'\n+import { \n+  Target, \n+  Wind, \n+  Thermometer, \n+  Droplets, \n+  Mountain, \n+  Gauge,\n+  Lock\n+} from 'lucide-react'\n+\n+export default function ShotCalculatorPage() {\n+  const { conditions } = useEnvironmental()\n+  const { getRecommendedClub, clubs } = useClubSettings()\n+  const { isPremium, setShowUpgradeModal } = usePremium()\n+  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude, convertAltitude } = useSettings()\n+  const { setShotCalcData } = useShotCalc()\n+  const [targetYardage, setTargetYardage] = useState(150)\n+  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n+\n+  // Calculate all adjustments in one memoized function\n+  const calculateAdjustments = useCallback(() => {\n+    if (!conditions || !conditions.density) return null;\n+\n+    const altitudeInMeters = settings.altitudeUnit === 'feet' \n+      ? convertAltitude(conditions.altitude, 'meters')\n+      : conditions.altitude\n+\n+    const densityEffect = (conditions.density - 1.225) * targetYardage * 0.1\n+    const altitudeEffect = altitudeInMeters * 0.00018 * targetYardage\n+    const humidityEffect = (conditions.humidity - 50) * 0.0002 * targetYardage\n+    const temperatureEffect = (conditions.temperature - 20) * 0.001 * targetYardage\n+\n+    const totalEffect = densityEffect + altitudeEffect + humidityEffect + temperatureEffect\n+    const adjustedYardage = targetYardage + totalEffect\n+\n+    return {\n+      adjustedYardage,\n+      densityEffect,\n+      altitudeEffect,\n+      humidityEffect,\n+      temperatureEffect,\n+      totalEffect\n+    }\n+  }, [conditions, targetYardage, settings.altitudeUnit, convertAltitude])\n+\n+  // Memoize the results\n+  const adjustments = useMemo(() => calculateAdjustments(), [calculateAdjustments])\n+\n+  // Update context only when needed\n+  useEffect(() => {\n+    // Prevent multiple updates in the same render cycle\n+    const now = Date.now()\n+    if (lastUpdate && now - lastUpdate < 100) return;\n+\n+    if (conditions && adjustments) {\n+      setLastUpdate(now)\n+      setShotCalcData({\n+        targetYardage,\n+        elevation: conditions.altitude,\n+        temperature: conditions.temperature,\n+        humidity: conditions.humidity,\n+        pressure: conditions.pressure,\n+        adjustedDistance: adjustments.adjustedYardage\n+      })\n+    }\n+  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n+\n+  const recommendedClub = useMemo(() => \n+    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n+    [adjustments, getRecommendedClub]\n+  )\n+\n+  if (!conditions) {\n+    return (\n+      <div className=\"min-h-screen bg-gray-900 text-white p-8\">\n+        <div className=\"animate-pulse\">\n+          <div className=\"h-8 bg-gray-800 rounded w-1/4 mb-4\"></div>\n+          <div className=\"h-64 bg-gray-800 rounded mb-4\"></div>\n+          <div className=\"h-8 bg-gray-800 rounded w-1/2\"></div>\n+        </div>\n+      </div>\n+    )\n+  }\n+\n+  const formatAdjustment = (yards: number) => {\n+    const value = settings.distanceUnit === 'meters' \n+      ? convertDistance(Math.abs(yards), 'meters')\n+      : Math.abs(yards)\n+    \n+    return `${yards >= 0 ? '+' : '-'}${Math.round(value)} ${\n+      settings.distanceUnit === 'yards' ? 'yds' : 'm'\n+    }`\n+  }\n+\n+  return (\n+    <div className=\"p-4 max-w-2xl mx-auto\">\n+      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n+\n+      {/* Target Distance Input */}\n+      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n+        <div className=\"flex items-center gap-4\">\n+          <input\n+            type=\"range\"\n+            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n+            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n+            value={targetYardage}\n+            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n+            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:bg-blue-500 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:cursor-pointer [&::-webkit-slider-thumb]:shadow-lg [&::-webkit-slider-thumb]:shadow-blue-500/50 [&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:bg-blue-500 [&::-moz-range-thumb]:border-0 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:cursor-pointer [&::-moz-range-thumb]:shadow-lg [&::-moz-range-thumb]:shadow-blue-500/50\"\n+          />\n+          <div className=\"text-2xl font-bold w-32 text-right\">\n+            {formatDistance(targetYardage)}\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Environmental Adjustments */}\n+      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+        <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n+        \n+        <div className=\"space-y-4\">\n+          {/* Air Density */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Gauge className=\"w-4 h-4 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-sm\">Air Density</div>\n+                <div className=\"text-xs text-gray-400\">\n+                  {conditions.density?.toFixed(3) ?? 'N/A'} kg/m³\n+                </div>\n+              </div>\n+            </div>\n+            <div className={`${(adjustments?.densityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+              {formatAdjustment(adjustments?.densityEffect ?? 0)}\n+            </div>\n+          </div>\n+\n+          {/* Altitude */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Mountain className=\"w-4 h-4 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-sm\">Altitude</div>\n+                <div className=\"text-xs text-gray-400\">\n+                  {formatAltitude(conditions.altitude)}\n+                </div>\n+              </div>\n+            </div>\n+            <div className=\"text-blue-400\">\n+              {adjustments && formatAdjustment(adjustments.altitudeEffect)}\n+            </div>\n+          </div>\n+\n+          {/* Temperature */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Thermometer className=\"w-4 h-4 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-sm\">Temperature</div>\n+                <div className=\"text-xs text-gray-400\">\n+                  {formatTemperature(conditions.temperature)}\n+                </div>\n+              </div>\n+            </div>\n+            <div className={`${(adjustments?.temperatureEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+              {formatAdjustment(adjustments?.temperatureEffect ?? 0)}\n+            </div>\n+          </div>\n+\n+          {/* Humidity */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Droplets className=\"w-4 h-4 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-sm\">Humidity</div>\n+                <div className=\"text-xs text-gray-400\">\n+                  {conditions.humidity.toFixed(0)}%\n+                </div>\n+              </div>\n+            </div>\n+            <div className={`${(adjustments?.humidityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+              {formatAdjustment(adjustments?.humidityEffect ?? 0)}\n+            </div>\n+          </div>\n+\n+          <div className=\"h-px bg-gray-700 my-4\" />\n+\n+          {/* Total Adjustment */}\n+          <div className=\"flex items-center justify-between font-medium\">\n+            <div>Total Adjustment</div>\n+            <div className={`${(adjustments?.totalEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+              {formatAdjustment(adjustments?.totalEffect ?? 0)}\n+            </div>\n+          </div>\n+\n+          {/* Adjusted Distance */}\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"text-sm text-gray-400\">Playing Distance</div>\n+            <div className=\"text-lg font-bold\">\n+              {adjustments && formatDistance(adjustments.adjustedYardage)}\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      {/* Club Recommendation */}\n+      {recommendedClub && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n+          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n+          <div className=\"flex items-center justify-between\">\n+            <div className=\"flex items-center gap-3\">\n+              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+                <Target className=\"w-6 h-6 text-blue-400\" />\n+              </div>\n+              <div>\n+                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n+                <div className=\"text-sm text-gray-400\">\n+                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+      )}\n+\n+      {/* Premium Feature Teaser */}\n+      {!isPremium && (\n+        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n+          <div className=\"absolute top-3 right-3\">\n+            <Lock className=\"w-5 h-5 text-blue-400\" />\n+          </div>\n+          <div className=\"flex items-center gap-3 mb-4\">\n+            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n+              <Wind className=\"w-5 h-5 text-blue-400\" />\n+            </div>\n+            <div>\n+              <h3 className=\"font-medium\">Wind Analysis</h3>\n+              <p className=\"text-sm text-gray-400\">\n+                Upgrade to get precise wind adjustments\n+              </p>\n+            </div>\n+          </div>\n+          <button\n+            onClick={() => setShowUpgradeModal(true)}\n+            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n+          >\n+            Upgrade to Premium\n+          </button>\n+        </div>\n+      )}\n+    </div>\n+  )\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736989802249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n       </div>\n \n       {/* Environmental Adjustments */}\n       <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-        <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n+        <h2 className=\"text-lg font-semibold mb-4\">Environmental Conditions</h2>\n         \n         <div className=\"space-y-4\">\n           {/* Air Density */}\n           <div className=\"flex items-center justify-between\">\n@@ -139,11 +139,8 @@\n                   {conditions.density?.toFixed(3) ?? 'N/A'} kg/m³\n                 </div>\n               </div>\n             </div>\n-            <div className={`${(adjustments?.densityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-              {formatAdjustment(adjustments?.densityEffect ?? 0)}\n-            </div>\n           </div>\n \n           {/* Altitude */}\n           <div className=\"flex items-center justify-between\">\n@@ -157,11 +154,8 @@\n                   {formatAltitude(conditions.altitude)}\n                 </div>\n               </div>\n             </div>\n-            <div className=\"text-blue-400\">\n-              {adjustments && formatAdjustment(adjustments.altitudeEffect)}\n-            </div>\n           </div>\n \n           {/* Temperature */}\n           <div className=\"flex items-center justify-between\">\n@@ -175,11 +169,8 @@\n                   {formatTemperature(conditions.temperature)}\n                 </div>\n               </div>\n             </div>\n-            <div className={`${(adjustments?.temperatureEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-              {formatAdjustment(adjustments?.temperatureEffect ?? 0)}\n-            </div>\n           </div>\n \n           {/* Humidity */}\n           <div className=\"flex items-center justify-between\">\n@@ -193,302 +184,36 @@\n                   {conditions.humidity.toFixed(0)}%\n                 </div>\n               </div>\n             </div>\n-            <div className={`${(adjustments?.humidityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-              {formatAdjustment(adjustments?.humidityEffect ?? 0)}\n-            </div>\n           </div>\n-\n-          <div className=\"h-px bg-gray-700 my-4\" />\n-\n-          {/* Total Adjustment */}\n-          <div className=\"flex items-center justify-between font-medium\">\n-            <div>Total Adjustment</div>\n-            <div className={`${(adjustments?.totalEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-              {formatAdjustment(adjustments?.totalEffect ?? 0)}\n-            </div>\n-          </div>\n-\n-          {/* Adjusted Distance */}\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"text-sm text-gray-400\">Playing Distance</div>\n-            <div className=\"text-lg font-bold\">\n-              {adjustments && formatDistance(adjustments.adjustedYardage)}\n-            </div>\n-          </div>\n         </div>\n       </div>\n \n-      {/* Club Recommendation */}\n-      {recommendedClub && (\n+      {/* Shot Adjustments */}\n+      {adjustments && (\n         <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Target className=\"w-6 h-6 text-blue-400\" />\n+          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n+          <div className=\"space-y-4\">\n+            {/* Total Adjustment */}\n+            <div className=\"flex items-center justify-between font-medium\">\n+              <div>Total Adjustment</div>\n+              <div className={`${(adjustments.totalEffect) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n+                {formatAdjustment(adjustments.totalEffect)}\n               </div>\n-              <div>\n-                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n-                <div className=\"text-sm text-gray-400\">\n-                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n-                </div>\n-              </div>\n             </div>\n-          </div>\n-        </div>\n-      )}\n \n-      {/* Premium Feature Teaser */}\n-      {!isPremium && (\n-        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n-          <div className=\"absolute top-3 right-3\">\n-            <Lock className=\"w-5 h-5 text-blue-400\" />\n-          </div>\n-          <div className=\"flex items-center gap-3 mb-4\">\n-            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-              <Wind className=\"w-5 h-5 text-blue-400\" />\n+            {/* Adjusted Distance */}\n+            <div className=\"flex items-center justify-between\">\n+              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n+              <div className=\"text-lg font-bold\">\n+                {formatDistance(adjustments.adjustedYardage)}\n+              </div>\n             </div>\n-            <div>\n-              <h3 className=\"font-medium\">Wind Analysis</h3>\n-              <p className=\"text-sm text-gray-400\">\n-                Upgrade to get precise wind adjustments\n-              </p>\n-            </div>\n           </div>\n-          <button\n-            onClick={() => setShowUpgradeModal(true)}\n-            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n-          >\n-            Upgrade to Premium\n-          </button>\n         </div>\n       )}\n-    </div>\n-  )\n-}\n-'use client'\n \n-import { useState, useMemo, useEffect, useCallback } from 'react'\n-import { useEnvironmental } from '@/lib/hooks/use-environmental'\n-import { useClubSettings } from '@/lib/club-settings-context'\n-import { usePremium } from '@/lib/premium-context'\n-import { useSettings } from '@/lib/settings-context'\n-import { useShotCalc } from '@/lib/shot-calc-context'\n-import { \n-  Target, \n-  Wind, \n-  Thermometer, \n-  Droplets, \n-  Mountain, \n-  Gauge,\n-  Lock\n-} from 'lucide-react'\n-\n-export default function ShotCalculatorPage() {\n-  const { conditions } = useEnvironmental()\n-  const { getRecommendedClub, clubs } = useClubSettings()\n-  const { isPremium, setShowUpgradeModal } = usePremium()\n-  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude, convertAltitude } = useSettings()\n-  const { setShotCalcData } = useShotCalc()\n-  const [targetYardage, setTargetYardage] = useState(150)\n-  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n-\n-  // Calculate all adjustments in one memoized function\n-  const calculateAdjustments = useCallback(() => {\n-    if (!conditions || !conditions.density) return null;\n-\n-    const altitudeInMeters = settings.altitudeUnit === 'feet' \n-      ? convertAltitude(conditions.altitude, 'meters')\n-      : conditions.altitude\n-\n-    const densityEffect = (conditions.density - 1.225) * targetYardage * 0.1\n-    const altitudeEffect = altitudeInMeters * 0.00018 * targetYardage\n-    const humidityEffect = (conditions.humidity - 50) * 0.0002 * targetYardage\n-    const temperatureEffect = (conditions.temperature - 20) * 0.001 * targetYardage\n-\n-    const totalEffect = densityEffect + altitudeEffect + humidityEffect + temperatureEffect\n-    const adjustedYardage = targetYardage + totalEffect\n-\n-    return {\n-      adjustedYardage,\n-      densityEffect,\n-      altitudeEffect,\n-      humidityEffect,\n-      temperatureEffect,\n-      totalEffect\n-    }\n-  }, [conditions, targetYardage, settings.altitudeUnit, convertAltitude])\n-\n-  // Memoize the results\n-  const adjustments = useMemo(() => calculateAdjustments(), [calculateAdjustments])\n-\n-  // Update context only when needed\n-  useEffect(() => {\n-    // Prevent multiple updates in the same render cycle\n-    const now = Date.now()\n-    if (lastUpdate && now - lastUpdate < 100) return;\n-\n-    if (conditions && adjustments) {\n-      setLastUpdate(now)\n-      setShotCalcData({\n-        targetYardage,\n-        elevation: conditions.altitude,\n-        temperature: conditions.temperature,\n-        humidity: conditions.humidity,\n-        pressure: conditions.pressure,\n-        adjustedDistance: adjustments.adjustedYardage\n-      })\n-    }\n-  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n-\n-  const recommendedClub = useMemo(() => \n-    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n-    [adjustments, getRecommendedClub]\n-  )\n-\n-  if (!conditions) {\n-    return (\n-      <div className=\"min-h-screen bg-gray-900 text-white p-8\">\n-        <div className=\"animate-pulse\">\n-          <div className=\"h-8 bg-gray-800 rounded w-1/4 mb-4\"></div>\n-          <div className=\"h-64 bg-gray-800 rounded mb-4\"></div>\n-          <div className=\"h-8 bg-gray-800 rounded w-1/2\"></div>\n-        </div>\n-      </div>\n-    )\n-  }\n-\n-  const formatAdjustment = (yards: number) => {\n-    const value = settings.distanceUnit === 'meters' \n-      ? convertDistance(Math.abs(yards), 'meters')\n-      : Math.abs(yards)\n-    \n-    return `${yards >= 0 ? '+' : '-'}${Math.round(value)} ${\n-      settings.distanceUnit === 'yards' ? 'yds' : 'm'\n-    }`\n-  }\n-\n-  return (\n-    <div className=\"p-4 max-w-2xl mx-auto\">\n-      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n-\n-      {/* Target Distance Input */}\n-      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n-        <div className=\"flex items-center gap-4\">\n-          <input\n-            type=\"range\"\n-            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n-            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n-            value={targetYardage}\n-            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n-            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:bg-blue-500 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:cursor-pointer [&::-webkit-slider-thumb]:shadow-lg [&::-webkit-slider-thumb]:shadow-blue-500/50 [&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:bg-blue-500 [&::-moz-range-thumb]:border-0 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:cursor-pointer [&::-moz-range-thumb]:shadow-lg [&::-moz-range-thumb]:shadow-blue-500/50\"\n-          />\n-          <div className=\"text-2xl font-bold w-32 text-right\">\n-            {formatDistance(targetYardage)}\n-          </div>\n-        </div>\n-      </div>\n-\n-      {/* Environmental Adjustments */}\n-      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n-        <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n-        \n-        <div className=\"space-y-4\">\n-          {/* Air Density */}\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Gauge className=\"w-4 h-4 text-blue-400\" />\n-              </div>\n-              <div>\n-                <div className=\"text-sm\">Air Density</div>\n-                <div className=\"text-xs text-gray-400\">\n-                  {conditions.density?.toFixed(3) ?? 'N/A'} kg/m³\n-                </div>\n-              </div>\n-            </div>\n-            <div className={`${(adjustments?.densityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-              {formatAdjustment(adjustments?.densityEffect ?? 0)}\n-            </div>\n-          </div>\n-\n-          {/* Altitude */}\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Mountain className=\"w-4 h-4 text-blue-400\" />\n-              </div>\n-              <div>\n-                <div className=\"text-sm\">Altitude</div>\n-                <div className=\"text-xs text-gray-400\">\n-                  {formatAltitude(conditions.altitude)}\n-                </div>\n-              </div>\n-            </div>\n-            <div className=\"text-blue-400\">\n-              {adjustments && formatAdjustment(adjustments.altitudeEffect)}\n-            </div>\n-          </div>\n-\n-          {/* Temperature */}\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Thermometer className=\"w-4 h-4 text-blue-400\" />\n-              </div>\n-              <div>\n-                <div className=\"text-sm\">Temperature</div>\n-                <div className=\"text-xs text-gray-400\">\n-                  {formatTemperature(conditions.temperature)}\n-                </div>\n-              </div>\n-            </div>\n-            <div className={`${(adjustments?.temperatureEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-              {formatAdjustment(adjustments?.temperatureEffect ?? 0)}\n-            </div>\n-          </div>\n-\n-          {/* Humidity */}\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"flex items-center gap-3\">\n-              <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n-                <Droplets className=\"w-4 h-4 text-blue-400\" />\n-              </div>\n-              <div>\n-                <div className=\"text-sm\">Humidity</div>\n-                <div className=\"text-xs text-gray-400\">\n-                  {conditions.humidity.toFixed(0)}%\n-                </div>\n-              </div>\n-            </div>\n-            <div className={`${(adjustments?.humidityEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-              {formatAdjustment(adjustments?.humidityEffect ?? 0)}\n-            </div>\n-          </div>\n-\n-          <div className=\"h-px bg-gray-700 my-4\" />\n-\n-          {/* Total Adjustment */}\n-          <div className=\"flex items-center justify-between font-medium\">\n-            <div>Total Adjustment</div>\n-            <div className={`${(adjustments?.totalEffect ?? 0) >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n-              {formatAdjustment(adjustments?.totalEffect ?? 0)}\n-            </div>\n-          </div>\n-\n-          {/* Adjusted Distance */}\n-          <div className=\"flex items-center justify-between\">\n-            <div className=\"text-sm text-gray-400\">Playing Distance</div>\n-            <div className=\"text-lg font-bold\">\n-              {adjustments && formatDistance(adjustments.adjustedYardage)}\n-            </div>\n-          </div>\n-        </div>\n-      </div>\n-\n       {/* Club Recommendation */}\n       {recommendedClub && (\n         <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n           <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n"
                }
            ],
            "date": 1736988651703,
            "name": "Commit-0",
            "content": "'use client'\n\nimport { useState, useMemo, useEffect } from 'react'\nimport { useEnvironmental } from '@/lib/hooks/use-environmental'\nimport { useClubSettings } from '@/lib/club-settings-context'\nimport { usePremium } from '@/lib/premium-context'\nimport { useSettings } from '@/lib/settings-context'\nimport { useShotCalc } from '@/lib/shot-calc-context'\nimport { YardageModelEnhanced, SkillLevel } from '@/lib/yardage-model'\nimport { \n  Target, \n  Wind, \n  Thermometer, \n  Droplets, \n  Mountain, \n  Gauge,\n  Lock\n} from 'lucide-react'\n\nexport default function ShotCalculatorPage() {\n  const { conditions } = useEnvironmental()\n  const { getRecommendedClub } = useClubSettings()\n  const { isPremium, setShowUpgradeModal } = usePremium()\n  const { settings, convertDistance, formatDistance, formatTemperature, formatAltitude } = useSettings()\n  const { setShotCalcData } = useShotCalc()\n  const [targetYardage, setTargetYardage] = useState(150)\n  const [lastUpdate, setLastUpdate] = useState<number | null>(null)\n  const [yardageModel] = useState(() => new YardageModelEnhanced())\n\n  // Calculate all adjustments in one memoized function\n  const calculateAdjustments = () => {\n    if (!conditions) return null;\n\n    // Set all environmental conditions\n    yardageModel.set_conditions(\n      conditions.temperature,\n      conditions.altitude,\n      0, // No wind in basic calculator\n      0,\n      conditions.pressure,\n      conditions.humidity\n    );\n\n    // Calculate adjusted distance\n    const result = yardageModel.calculate_adjusted_yardage(\n      targetYardage,\n      SkillLevel.INTERMEDIATE,\n      'driver'\n    );\n\n    const adjustedYardage = result.carry_distance;\n    const standardDensity = 1.225; // kg/m³\n\n    return {\n      adjustedYardage,\n      densityEffect: ((conditions.density / standardDensity) - 1) * -targetYardage,\n      altitudeEffect: conditions.altitude * 0.00018 * targetYardage,\n      humidityEffect: (conditions.humidity - 50) * 0.0002 * targetYardage,\n      temperatureEffect: (conditions.temperature - 59) * 0.001 * targetYardage,\n      totalEffect: adjustedYardage - targetYardage\n    };\n  };\n\n  const adjustments = useMemo(() => calculateAdjustments(), [conditions, targetYardage])\n\n  // Update context only when needed\n  useEffect(() => {\n    const now = Date.now()\n    if (lastUpdate && now - lastUpdate < 100) return;\n\n    if (conditions && adjustments) {\n      setLastUpdate(now)\n      setShotCalcData({\n        targetYardage,\n        elevation: conditions.altitude,\n        temperature: conditions.temperature,\n        humidity: conditions.humidity,\n        pressure: conditions.pressure,\n        adjustedDistance: adjustments.adjustedYardage\n      })\n    }\n  }, [conditions, adjustments, targetYardage, setShotCalcData, lastUpdate])\n\n  const recommendedClub = useMemo(() => \n    adjustments ? getRecommendedClub(adjustments.adjustedYardage) : null, \n    [adjustments, getRecommendedClub]\n  )\n\n  return (\n    <div className=\"p-4 max-w-2xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-6\">Shot Calculator</h1>\n\n      {/* Target Distance Input */}\n      <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n        <div className=\"text-sm text-gray-400 mb-2\">Target Distance</div>\n        <div className=\"flex items-center gap-4\">\n          <input\n            type=\"range\"\n            min={settings.distanceUnit === 'yards' ? '50' : '45'}\n            max={settings.distanceUnit === 'yards' ? '300' : '275'}\n            value={targetYardage}\n            onChange={(e) => setTargetYardage(parseInt(e.target.value))}\n            className=\"w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer\"\n          />\n          <div className=\"text-2xl font-bold w-32 text-right\">\n            {formatDistance(targetYardage)}\n          </div>\n        </div>\n      </div>\n\n      {/* Environmental Adjustments */}\n      {adjustments && (\n        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Shot Adjustments</h2>\n          \n          <div className=\"space-y-4\">\n            {/* Air Density */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n                  <Gauge className=\"w-4 h-4 text-blue-400\" />\n                </div>\n                <div>\n                  <div className=\"text-sm\">Air Density</div>\n                  <div className=\"text-xs text-gray-400\">\n                    {conditions?.density.toFixed(3)} kg/m³\n                  </div>\n                </div>\n              </div>\n              <div className={`${adjustments.densityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n                {formatDistance(adjustments.densityEffect)}\n              </div>\n            </div>\n\n            {/* Altitude */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n                  <Mountain className=\"w-4 h-4 text-blue-400\" />\n                </div>\n                <div>\n                  <div className=\"text-sm\">Altitude</div>\n                  <div className=\"text-xs text-gray-400\">\n                    {formatAltitude(conditions?.altitude || 0)}\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-blue-400\">\n                {formatDistance(adjustments.altitudeEffect)}\n              </div>\n            </div>\n\n            {/* Temperature */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n                  <Thermometer className=\"w-4 h-4 text-blue-400\" />\n                </div>\n                <div>\n                  <div className=\"text-sm\">Temperature</div>\n                  <div className=\"text-xs text-gray-400\">\n                    {formatTemperature(conditions?.temperature || 0)}\n                  </div>\n                </div>\n              </div>\n              <div className={`${adjustments.temperatureEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n                {formatDistance(adjustments.temperatureEffect)}\n              </div>\n            </div>\n\n            {/* Humidity */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center\">\n                  <Droplets className=\"w-4 h-4 text-blue-400\" />\n                </div>\n                <div>\n                  <div className=\"text-sm\">Humidity</div>\n                  <div className=\"text-xs text-gray-400\">\n                    {conditions?.humidity.toFixed(0)}%\n                  </div>\n                </div>\n              </div>\n              <div className={`${adjustments.humidityEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n                {formatDistance(adjustments.humidityEffect)}\n              </div>\n            </div>\n\n            <div className=\"h-px bg-gray-700 my-4\" />\n\n            {/* Total Adjustment */}\n            <div className=\"flex items-center justify-between font-medium\">\n              <div>Total Adjustment</div>\n              <div className={`${adjustments.totalEffect >= 0 ? 'text-blue-400' : 'text-red-400'}`}>\n                {formatDistance(adjustments.totalEffect)}\n              </div>\n            </div>\n\n            {/* Adjusted Distance */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-sm text-gray-400\">Playing Distance</div>\n              <div className=\"text-lg font-bold\">\n                {formatDistance(adjustments.adjustedYardage)}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Club Recommendation */}\n      {recommendedClub && (\n        <div className=\"bg-gray-800 rounded-xl p-6 mb-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Recommended Club</h2>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center\">\n                <Target className=\"w-6 h-6 text-blue-400\" />\n              </div>\n              <div>\n                <div className=\"text-xl font-medium\">{recommendedClub.name}</div>\n                <div className=\"text-sm text-gray-400\">\n                  Normal carry: {formatDistance(recommendedClub.normalYardage)}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Premium Feature Teaser */}\n      {!isPremium && (\n        <div className=\"bg-gray-800 rounded-xl p-6 relative overflow-hidden\">\n          <div className=\"absolute top-3 right-3\">\n            <Lock className=\"w-5 h-5 text-blue-400\" />\n          </div>\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"w-10 h-10 bg-blue-500/20 rounded-full flex items-center justify-center\">\n              <Wind className=\"w-5 h-5 text-blue-400\" />\n            </div>\n            <div>\n              <h3 className=\"font-medium\">Wind Analysis</h3>\n              <p className=\"text-sm text-gray-400\">\n                Upgrade to get precise wind adjustments\n              </p>\n            </div>\n          </div>\n          <button\n            onClick={() => setShowUpgradeModal(true)}\n            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 rounded-lg transition-colors\"\n          >\n            Upgrade to Premium\n          </button>\n        </div>\n      )}\n    </div>\n  )\n}"
        }
    ]
}