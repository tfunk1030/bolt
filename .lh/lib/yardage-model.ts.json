{
    "sourceFile": "lib/yardage-model.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1736988450237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736988484475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,19 @@\n       temp_sensitivity: 1.2\n     }\n   }\n \n+  // Air density table\n+  private static AIR_DENSITY_TABLE: Record<number, number> = {\n+    40: 1.06,\n+    50: 1.04,\n+    60: 1.02,\n+    70: 1.00,\n+    80: 0.98,\n+    90: 0.96,\n+    100: 0.94\n+  }\n+\n   // Spin decay rates\n   private static SPIN_DECAY_RATES: Record<string, number> = {\n     \"driver\": 0.08,\n     \"3-wood\": 0.09,\n@@ -98,33 +109,14 @@\n   private altitude: number | null = null\n   private wind_speed: number | null = null\n   private wind_direction: number | null = null\n   private ball_model: string = \"mid_range\"\n-  private pressure: number | null = null\n-  private humidity: number | null = null\n \n-  // Remove the old AIR_DENSITY_TABLE and replace with standard conditions\n-  private static STANDARD_CONDITIONS = {\n-    TEMPERATURE: 59, // °F (15°C)\n-    PRESSURE: 1013.25, // hPa\n-    DENSITY: 1.225, // kg/m³\n-    HUMIDITY: 50 // %\n-  }\n-\n-  set_conditions(\n-    temperature: number,\n-    altitude: number,\n-    wind_speed: number,\n-    wind_direction: number,\n-    pressure?: number,\n-    humidity?: number\n-  ): void {\n+  set_conditions(temperature: number, altitude: number, wind_speed: number, wind_direction: number): void {\n     this.temperature = temperature\n     this.altitude = altitude\n     this.wind_speed = wind_speed\n     this.wind_direction = wind_direction\n-    this.pressure = pressure ?? null\n-    this.humidity = humidity ?? null\n   }\n \n   set_ball_model(model: string): void {\n     if (!(model in YardageModelEnhanced.BALL_MODELS)) {\n@@ -154,32 +146,20 @@\n     }\n     return 1.0\n   }\n \n-  private _calculate_air_density(temperature: number, pressure: number, humidity: number): number {\n-    // Convert temperature to Celsius\n-    const tempC = (temperature - 32) * 5/9;\n-    \n-    // Calculate vapor pressure using Magnus formula\n-    const a = 6.1121; // mb\n-    const b = 17.368;\n-    const c = 238.88; // °C\n-    const satVaporPressure = a * Math.exp((b * tempC) / (c + tempC));\n-    const vaporPressure = (humidity / 100) * satVaporPressure;\n-    \n-    // Convert pressure to Pascals and calculate dry air pressure\n-    const pressurePa = pressure * 100;\n-    const dryPressure = pressurePa - (vaporPressure * 100);\n-    \n-    // Gas constants\n-    const Rd = 287.05; // J/(kg·K) - Dry air\n-    const Rv = 461.495; // J/(kg·K) - Water vapor\n-    \n-    // Calculate air density using the ideal gas law with humidity correction\n-    const density = (dryPressure / (Rd * (tempC + 273.15))) + \n-                   (vaporPressure * 100 / (Rv * (tempC + 273.15)));\n-    \n-    return density;\n+  private _calculate_air_density(temperature: number): number {\n+    const temps = Object.keys(YardageModelEnhanced.AIR_DENSITY_TABLE).map(Number).sort((a, b) => a - b)\n+    for (let i = 0; i < temps.length - 1; i++) {\n+      if (temps[i] <= temperature && temperature <= temps[i + 1]) {\n+        const temp1 = temps[i], temp2 = temps[i + 1]\n+        const density1 = YardageModelEnhanced.AIR_DENSITY_TABLE[temp1]\n+        const density2 = YardageModelEnhanced.AIR_DENSITY_TABLE[temp2]\n+        const ratio = (temperature - temp1) / (temp2 - temp1)\n+        return density1 + (density2 - density1) * ratio\n+      }\n+    }\n+    return 1.0\n   }\n \n   private _calculate_spin_decay(club: string, initial_spin: number, flight_time: number): number {\n     const decay_rate = YardageModelEnhanced.SPIN_DECAY_RATES[club]\n@@ -205,28 +185,14 @@\n     const initial_velocity_fps = club_data.ball_speed * 1.467 * ball.speed_factor\n     const launch_rad = club_data.launch_angle * Math.PI / 180\n     const flight_time = (2 * initial_velocity_fps * Math.sin(launch_rad)) / gravity\n     \n-    // Temperature and density effects\n+    // Temperature effects\n     if (this.temperature !== null) {\n-      const currentDensity = this._calculate_air_density(\n-        this.temperature,\n-        this.pressure || YardageModelEnhanced.STANDARD_CONDITIONS.PRESSURE,\n-        this.humidity || YardageModelEnhanced.STANDARD_CONDITIONS.HUMIDITY\n-      );\n-      \n-      const densityRatio = currentDensity / YardageModelEnhanced.STANDARD_CONDITIONS.DENSITY;\n-      \n-      // Density effect on distance (approximately -1% per 1% increase in density)\n-      const densityEffect = (1 - densityRatio);\n-      \n-      // Temperature effect on ball compression\n-      const tempEffect = (this.temperature - YardageModelEnhanced.STANDARD_CONDITIONS.TEMPERATURE) * 0.0008;\n-      \n-      // Combined effect (weighted average)\n-      const combinedEffect = (2 * densityEffect + tempEffect) / 3;\n-      \n-      adjusted_yardage *= (1 + combinedEffect);\n+      const air_density_factor = this._calculate_air_density(this.temperature)\n+      const ball_temp_effect = 1 + ((this.temperature - 70) * 0.003 * ball.temp_sensitivity)\n+      const temp_effect = (2 * ball_temp_effect + air_density_factor) / 3\n+      adjusted_yardage *= temp_effect\n     }\n     \n     // Altitude effects\n     if (this.altitude !== null) {\n"
                },
                {
                    "date": 1736988623935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,14 +109,16 @@\n   private altitude: number | null = null\n   private wind_speed: number | null = null\n   private wind_direction: number | null = null\n   private ball_model: string = \"mid_range\"\n+  private humidity: number | null = null\n \n-  set_conditions(temperature: number, altitude: number, wind_speed: number, wind_direction: number): void {\n+  set_conditions(temperature: number, altitude: number, wind_speed: number, wind_direction: number, humidity: number): void {\n     this.temperature = temperature\n     this.altitude = altitude\n     this.wind_speed = wind_speed\n     this.wind_direction = wind_direction\n+    this.humidity = humidity\n   }\n \n   set_ball_model(model: string): void {\n     if (!(model in YardageModelEnhanced.BALL_MODELS)) {\n@@ -185,24 +187,30 @@\n     const initial_velocity_fps = club_data.ball_speed * 1.467 * ball.speed_factor\n     const launch_rad = club_data.launch_angle * Math.PI / 180\n     const flight_time = (2 * initial_velocity_fps * Math.sin(launch_rad)) / gravity\n     \n+    let total_adjustment = 0\n+    \n     // Temperature effects\n     if (this.temperature !== null) {\n       const air_density_factor = this._calculate_air_density(this.temperature)\n       const ball_temp_effect = 1 + ((this.temperature - 70) * 0.003 * ball.temp_sensitivity)\n       const temp_effect = (2 * ball_temp_effect + air_density_factor) / 3\n-      adjusted_yardage *= temp_effect\n+      total_adjustment += (temp_effect - 1) * target_yardage\n     }\n     \n     // Altitude effects\n     if (this.altitude !== null) {\n       const altitude_effect = this._calculate_altitude_effect(this.altitude)\n-      const initial_spin = club_data.spin_rate * ball.spin_factor\n-      const average_spin = this._calculate_spin_decay(club_lower, initial_spin, flight_time)\n-      adjusted_yardage *= altitude_effect\n+      total_adjustment += (altitude_effect - 1) * target_yardage\n     }\n     \n+    // Humidity effect\n+    const humidity_effect = ((this.humidity || 50) - 50) * 0.0002\n+    total_adjustment += humidity_effect * target_yardage\n+    \n+    adjusted_yardage = target_yardage + total_adjustment\n+    \n     // Wind effects\n     let lateral_movement = 0\n     if (this.wind_speed !== null && this.wind_direction !== null) {\n       const wind_rad = this.wind_direction * Math.PI / 180\n"
                },
                {
                    "date": 1736988634051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,16 +109,14 @@\n   private altitude: number | null = null\n   private wind_speed: number | null = null\n   private wind_direction: number | null = null\n   private ball_model: string = \"mid_range\"\n-  private humidity: number | null = null\n \n-  set_conditions(temperature: number, altitude: number, wind_speed: number, wind_direction: number, humidity: number): void {\n+  set_conditions(temperature: number, altitude: number, wind_speed: number, wind_direction: number): void {\n     this.temperature = temperature\n     this.altitude = altitude\n     this.wind_speed = wind_speed\n     this.wind_direction = wind_direction\n-    this.humidity = humidity\n   }\n \n   set_ball_model(model: string): void {\n     if (!(model in YardageModelEnhanced.BALL_MODELS)) {\n@@ -187,30 +185,24 @@\n     const initial_velocity_fps = club_data.ball_speed * 1.467 * ball.speed_factor\n     const launch_rad = club_data.launch_angle * Math.PI / 180\n     const flight_time = (2 * initial_velocity_fps * Math.sin(launch_rad)) / gravity\n     \n-    let total_adjustment = 0\n-    \n     // Temperature effects\n     if (this.temperature !== null) {\n       const air_density_factor = this._calculate_air_density(this.temperature)\n       const ball_temp_effect = 1 + ((this.temperature - 70) * 0.003 * ball.temp_sensitivity)\n       const temp_effect = (2 * ball_temp_effect + air_density_factor) / 3\n-      total_adjustment += (temp_effect - 1) * target_yardage\n+      adjusted_yardage *= temp_effect\n     }\n     \n     // Altitude effects\n     if (this.altitude !== null) {\n       const altitude_effect = this._calculate_altitude_effect(this.altitude)\n-      total_adjustment += (altitude_effect - 1) * target_yardage\n+      const initial_spin = club_data.spin_rate * ball.spin_factor\n+      const average_spin = this._calculate_spin_decay(club_lower, initial_spin, flight_time)\n+      adjusted_yardage *= altitude_effect\n     }\n     \n-    // Humidity effect\n-    const humidity_effect = ((this.humidity || 50) - 50) * 0.0002\n-    total_adjustment += humidity_effect * target_yardage\n-    \n-    adjusted_yardage = target_yardage + total_adjustment\n-    \n     // Wind effects\n     let lateral_movement = 0\n     if (this.wind_speed !== null && this.wind_direction !== null) {\n       const wind_rad = this.wind_direction * Math.PI / 180\n"
                },
                {
                    "date": 1736988639838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,19 +84,8 @@\n       temp_sensitivity: 1.2\n     }\n   }\n \n-  // Air density table\n-  private static AIR_DENSITY_TABLE: Record<number, number> = {\n-    40: 1.06,\n-    50: 1.04,\n-    60: 1.02,\n-    70: 1.00,\n-    80: 0.98,\n-    90: 0.96,\n-    100: 0.94\n-  }\n-\n   // Spin decay rates\n   private static SPIN_DECAY_RATES: Record<string, number> = {\n     \"driver\": 0.08,\n     \"3-wood\": 0.09,\n@@ -104,19 +93,37 @@\n     \"7-iron\": 0.12,\n     \"pitching-wedge\": 0.15\n   }\n \n+  private static STANDARD_CONDITIONS = {\n+    TEMPERATURE: 59, // °F (15°C)\n+    PRESSURE: 1013.25, // hPa\n+    DENSITY: 1.225, // kg/m³\n+    HUMIDITY: 50 // %\n+  }\n+\n   private temperature: number | null = null\n   private altitude: number | null = null\n   private wind_speed: number | null = null\n   private wind_direction: number | null = null\n   private ball_model: string = \"mid_range\"\n+  private pressure: number | null = null\n+  private humidity: number | null = null\n \n-  set_conditions(temperature: number, altitude: number, wind_speed: number, wind_direction: number): void {\n+  set_conditions(\n+    temperature: number,\n+    altitude: number,\n+    wind_speed: number,\n+    wind_direction: number,\n+    pressure?: number,\n+    humidity?: number\n+  ): void {\n     this.temperature = temperature\n     this.altitude = altitude\n     this.wind_speed = wind_speed\n     this.wind_direction = wind_direction\n+    this.pressure = pressure ?? null\n+    this.humidity = humidity ?? null\n   }\n \n   set_ball_model(model: string): void {\n     if (!(model in YardageModelEnhanced.BALL_MODELS)) {\n@@ -146,20 +153,32 @@\n     }\n     return 1.0\n   }\n \n-  private _calculate_air_density(temperature: number): number {\n-    const temps = Object.keys(YardageModelEnhanced.AIR_DENSITY_TABLE).map(Number).sort((a, b) => a - b)\n-    for (let i = 0; i < temps.length - 1; i++) {\n-      if (temps[i] <= temperature && temperature <= temps[i + 1]) {\n-        const temp1 = temps[i], temp2 = temps[i + 1]\n-        const density1 = YardageModelEnhanced.AIR_DENSITY_TABLE[temp1]\n-        const density2 = YardageModelEnhanced.AIR_DENSITY_TABLE[temp2]\n-        const ratio = (temperature - temp1) / (temp2 - temp1)\n-        return density1 + (density2 - density1) * ratio\n-      }\n-    }\n-    return 1.0\n+  private _calculate_air_density(temperature: number, pressure: number, humidity: number): number {\n+    // Convert temperature to Celsius\n+    const tempC = (temperature - 32) * 5/9;\n+    \n+    // Calculate vapor pressure using Magnus formula\n+    const a = 6.1121; // mb\n+    const b = 17.368;\n+    const c = 238.88; // °C\n+    const satVaporPressure = a * Math.exp((b * tempC) / (c + tempC));\n+    const vaporPressure = (humidity / 100) * satVaporPressure;\n+    \n+    // Convert pressure to Pascals and calculate dry air pressure\n+    const pressurePa = pressure * 100;\n+    const dryPressure = pressurePa - (vaporPressure * 100);\n+    \n+    // Gas constants\n+    const Rd = 287.05; // J/(kg·K) - Dry air\n+    const Rv = 461.495; // J/(kg·K) - Water vapor\n+    \n+    // Calculate air density using the ideal gas law with humidity correction\n+    const density = (dryPressure / (Rd * (tempC + 273.15))) + \n+                   (vaporPressure * 100 / (Rv * (tempC + 273.15)));\n+    \n+    return density;\n   }\n \n   private _calculate_spin_decay(club: string, initial_spin: number, flight_time: number): number {\n     const decay_rate = YardageModelEnhanced.SPIN_DECAY_RATES[club]\n@@ -185,14 +204,28 @@\n     const initial_velocity_fps = club_data.ball_speed * 1.467 * ball.speed_factor\n     const launch_rad = club_data.launch_angle * Math.PI / 180\n     const flight_time = (2 * initial_velocity_fps * Math.sin(launch_rad)) / gravity\n     \n-    // Temperature effects\n+    // Temperature and density effects\n     if (this.temperature !== null) {\n-      const air_density_factor = this._calculate_air_density(this.temperature)\n-      const ball_temp_effect = 1 + ((this.temperature - 70) * 0.003 * ball.temp_sensitivity)\n-      const temp_effect = (2 * ball_temp_effect + air_density_factor) / 3\n-      adjusted_yardage *= temp_effect\n+      const currentDensity = this._calculate_air_density(\n+        this.temperature,\n+        this.pressure || YardageModelEnhanced.STANDARD_CONDITIONS.PRESSURE,\n+        this.humidity || YardageModelEnhanced.STANDARD_CONDITIONS.HUMIDITY\n+      );\n+      \n+      const densityRatio = currentDensity / YardageModelEnhanced.STANDARD_CONDITIONS.DENSITY;\n+      \n+      // Density effect on distance (approximately -1% per 1% increase in density)\n+      const densityEffect = (1 - densityRatio);\n+      \n+      // Temperature effect on ball compression\n+      const tempEffect = (this.temperature - YardageModelEnhanced.STANDARD_CONDITIONS.TEMPERATURE) * 0.0008;\n+      \n+      // Combined effect (weighted average)\n+      const combinedEffect = (2 * densityEffect + tempEffect) / 3;\n+      \n+      adjusted_yardage *= (1 + combinedEffect);\n     }\n     \n     // Altitude effects\n     if (this.altitude !== null) {\n"
                }
            ],
            "date": 1736988450237,
            "name": "Commit-0",
            "content": "import { type } from \"os\";\n\nexport enum SkillLevel {\n  BEGINNER = \"beginner\",      // High HCP (17+)\n  INTERMEDIATE = \"intermediate\",  // Mid HCP (9-16)\n  ADVANCED = \"advanced\",      // Low HCP (0-8)\n  PROFESSIONAL = \"professional\"  // Tour Pro\n}\n\nexport interface ShotResult {\n  carry_distance: number  // Adjusted carry distance in yards\n  lateral_movement: number  // Lateral movement in yards (+ is right, - is left)\n}\n\nexport interface BallModel {\n  name: string\n  compression: number\n  speed_factor: number\n  spin_factor: number\n  temp_sensitivity: number\n}\n\nexport interface ClubData {\n  name: string\n  ball_speed: number     // Ball speed in mph\n  launch_angle: number   // Launch angle in degrees\n  spin_rate: number      // Spin rate in rpm\n  max_height: number     // Max height in yards\n  land_angle: number     // Landing angle in degrees\n  spin_decay: number     // Spin decay rate in % per second\n}\n\nexport class YardageModelEnhanced {\n  // PGA Tour average club data\n  private static CLUB_DATABASE: Record<string, ClubData> = {\n    \"driver\": { name: \"Driver\", ball_speed: 171, launch_angle: 10.4, spin_rate: 2545, max_height: 35, land_angle: 39, spin_decay: 0.08 },\n    \"3-wood\": { name: \"3-Wood\", ball_speed: 162, launch_angle: 9.3, spin_rate: 3663, max_height: 32, land_angle: 44, spin_decay: 0.09 },\n    \"5-iron\": { name: \"5-Iron\", ball_speed: 135, launch_angle: 11.9, spin_rate: 5280, max_height: 33, land_angle: 50, spin_decay: 0.11 },\n    \"7-iron\": { name: \"7-Iron\", ball_speed: 123, launch_angle: 16.1, spin_rate: 7124, max_height: 34, land_angle: 51, spin_decay: 0.12 },\n    \"pitching-wedge\": { name: \"Pitching Wedge\", ball_speed: 104, launch_angle: 23.7, spin_rate: 9316, max_height: 32, land_angle: 52, spin_decay: 0.15 }\n  }\n\n  // Altitude effects\n  private static ALTITUDE_EFFECTS: Record<number, number> = {\n    0: 1.000,\n    1000: 1.021,\n    2000: 1.043,\n    3000: 1.065,\n    4000: 1.088,\n    5000: 1.112,\n    6000: 1.137,\n    7000: 1.163,\n    8000: 1.190\n  }\n\n  // Ball Models\n  private static BALL_MODELS: Record<string, BallModel> = {\n    \"tour_premium\": {\n      name: \"Tour Premium\",\n      compression: 95,\n      speed_factor: 1.00,\n      spin_factor: 1.05,\n      temp_sensitivity: 0.8\n    },\n    \"distance\": {\n      name: \"Distance\",\n      compression: 85,\n      speed_factor: 1.01,\n      spin_factor: 0.95,\n      temp_sensitivity: 1.0\n    },\n    \"mid_range\": {\n      name: \"Mid Range\",\n      compression: 90,\n      speed_factor: 0.98,\n      spin_factor: 1.00,\n      temp_sensitivity: 1.0\n    },\n    \"two_piece\": {\n      name: \"Two Piece\",\n      compression: 80,\n      speed_factor: 0.96,\n      spin_factor: 0.90,\n      temp_sensitivity: 1.2\n    }\n  }\n\n  // Spin decay rates\n  private static SPIN_DECAY_RATES: Record<string, number> = {\n    \"driver\": 0.08,\n    \"3-wood\": 0.09,\n    \"5-iron\": 0.11,\n    \"7-iron\": 0.12,\n    \"pitching-wedge\": 0.15\n  }\n\n  private temperature: number | null = null\n  private altitude: number | null = null\n  private wind_speed: number | null = null\n  private wind_direction: number | null = null\n  private ball_model: string = \"mid_range\"\n  private pressure: number | null = null\n  private humidity: number | null = null\n\n  // Remove the old AIR_DENSITY_TABLE and replace with standard conditions\n  private static STANDARD_CONDITIONS = {\n    TEMPERATURE: 59, // °F (15°C)\n    PRESSURE: 1013.25, // hPa\n    DENSITY: 1.225, // kg/m³\n    HUMIDITY: 50 // %\n  }\n\n  set_conditions(\n    temperature: number,\n    altitude: number,\n    wind_speed: number,\n    wind_direction: number,\n    pressure?: number,\n    humidity?: number\n  ): void {\n    this.temperature = temperature\n    this.altitude = altitude\n    this.wind_speed = wind_speed\n    this.wind_direction = wind_direction\n    this.pressure = pressure ?? null\n    this.humidity = humidity ?? null\n  }\n\n  set_ball_model(model: string): void {\n    if (!(model in YardageModelEnhanced.BALL_MODELS)) {\n      throw new Error(`Unknown ball model: ${model}`)\n    }\n    this.ball_model = model\n  }\n\n  private _calculate_wind_gradient(height_ft: number): number {\n    if (height_ft <= 10) return 0.75\n    if (height_ft <= 50) return 0.85\n    if (height_ft <= 100) return 1.0\n    if (height_ft <= 150) return 1.15\n    return 1.25\n  }\n\n  private _calculate_altitude_effect(altitude: number): number {\n    const alts = Object.keys(YardageModelEnhanced.ALTITUDE_EFFECTS).map(Number).sort((a, b) => a - b)\n    for (let i = 0; i < alts.length - 1; i++) {\n      if (alts[i] <= altitude && altitude <= alts[i + 1]) {\n        const alt1 = alts[i], alt2 = alts[i + 1]\n        const effect1 = YardageModelEnhanced.ALTITUDE_EFFECTS[alt1]\n        const effect2 = YardageModelEnhanced.ALTITUDE_EFFECTS[alt2]\n        const ratio = (altitude - alt1) / (alt2 - alt1)\n        return effect1 + (effect2 - effect1) * ratio\n      }\n    }\n    return 1.0\n  }\n\n  private _calculate_air_density(temperature: number, pressure: number, humidity: number): number {\n    // Convert temperature to Celsius\n    const tempC = (temperature - 32) * 5/9;\n    \n    // Calculate vapor pressure using Magnus formula\n    const a = 6.1121; // mb\n    const b = 17.368;\n    const c = 238.88; // °C\n    const satVaporPressure = a * Math.exp((b * tempC) / (c + tempC));\n    const vaporPressure = (humidity / 100) * satVaporPressure;\n    \n    // Convert pressure to Pascals and calculate dry air pressure\n    const pressurePa = pressure * 100;\n    const dryPressure = pressurePa - (vaporPressure * 100);\n    \n    // Gas constants\n    const Rd = 287.05; // J/(kg·K) - Dry air\n    const Rv = 461.495; // J/(kg·K) - Water vapor\n    \n    // Calculate air density using the ideal gas law with humidity correction\n    const density = (dryPressure / (Rd * (tempC + 273.15))) + \n                   (vaporPressure * 100 / (Rv * (tempC + 273.15)));\n    \n    return density;\n  }\n\n  private _calculate_spin_decay(club: string, initial_spin: number, flight_time: number): number {\n    const decay_rate = YardageModelEnhanced.SPIN_DECAY_RATES[club]\n    return initial_spin * (1 - decay_rate * flight_time/2)\n  }\n\n  calculate_adjusted_yardage(target_yardage: number, skill_level: SkillLevel, club: string): ShotResult {\n    const club_lower = club.toLowerCase()\n    if (!(club_lower in YardageModelEnhanced.CLUB_DATABASE)) {\n      throw new Error(`Unknown club: ${club}`)\n    }\n\n    const club_data = YardageModelEnhanced.CLUB_DATABASE[club_lower]\n    const ball = YardageModelEnhanced.BALL_MODELS[this.ball_model]\n    \n    let adjusted_yardage = target_yardage\n    \n    // Apply ball speed effect\n    adjusted_yardage *= ball.speed_factor\n    \n    // Calculate flight time\n    const gravity = 32.2\n    const initial_velocity_fps = club_data.ball_speed * 1.467 * ball.speed_factor\n    const launch_rad = club_data.launch_angle * Math.PI / 180\n    const flight_time = (2 * initial_velocity_fps * Math.sin(launch_rad)) / gravity\n    \n    // Temperature and density effects\n    if (this.temperature !== null) {\n      const currentDensity = this._calculate_air_density(\n        this.temperature,\n        this.pressure || YardageModelEnhanced.STANDARD_CONDITIONS.PRESSURE,\n        this.humidity || YardageModelEnhanced.STANDARD_CONDITIONS.HUMIDITY\n      );\n      \n      const densityRatio = currentDensity / YardageModelEnhanced.STANDARD_CONDITIONS.DENSITY;\n      \n      // Density effect on distance (approximately -1% per 1% increase in density)\n      const densityEffect = (1 - densityRatio);\n      \n      // Temperature effect on ball compression\n      const tempEffect = (this.temperature - YardageModelEnhanced.STANDARD_CONDITIONS.TEMPERATURE) * 0.0008;\n      \n      // Combined effect (weighted average)\n      const combinedEffect = (2 * densityEffect + tempEffect) / 3;\n      \n      adjusted_yardage *= (1 + combinedEffect);\n    }\n    \n    // Altitude effects\n    if (this.altitude !== null) {\n      const altitude_effect = this._calculate_altitude_effect(this.altitude)\n      const initial_spin = club_data.spin_rate * ball.spin_factor\n      const average_spin = this._calculate_spin_decay(club_lower, initial_spin, flight_time)\n      adjusted_yardage *= altitude_effect\n    }\n    \n    // Wind effects\n    let lateral_movement = 0\n    if (this.wind_speed !== null && this.wind_direction !== null) {\n      const wind_rad = this.wind_direction * Math.PI / 180\n      const distance_factor = adjusted_yardage / 300\n      \n      const speed_factor = Math.sqrt(171 / (club_data.ball_speed * ball.speed_factor))\n      const height_factor = club_data.max_height / 35\n      \n      const wind_multiplier = this._calculate_wind_gradient(club_data.max_height * 3)\n      const effective_wind = this.wind_speed * wind_multiplier\n      \n      // Head/tail wind\n      let wind_factor = Math.cos(wind_rad)\n      if (wind_factor > 0) wind_factor *= 1.5\n      \n      const head_tail_effect = effective_wind * wind_factor * distance_factor * speed_factor * 1.2\n      const height_effect = Math.sqrt(club_data.max_height / 35)\n      adjusted_yardage -= head_tail_effect * height_effect\n      \n      // Crosswind\n      const cross_factor = Math.sin(wind_rad)\n      const cross_wind_effect = effective_wind * cross_factor * 0.35\n      const lateral_base = cross_wind_effect * distance_factor * speed_factor * 3.0\n      \n      const spin_factor = Math.sqrt((club_data.spin_rate * ball.spin_factor) / 2545)\n      const loft_factor = Math.sqrt(club_data.launch_angle / 10.4)\n      \n      lateral_movement = lateral_base * (1 + (spin_factor + loft_factor - 2) * 0.2)\n    }\n\n    return {\n      carry_distance: Math.round(adjusted_yardage * 10) / 10,\n      lateral_movement: Math.round(lateral_movement * 10) / 10\n    }\n  }\n}"
        }
    ]
}