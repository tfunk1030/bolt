{
    "sourceFile": "lib/environmental-calculations.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1736980415762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736980532434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,8 @@\n   altitude: number;        // in feet\n   windSpeed: number;       // in mph\n   windDirection: number;   // in degrees (0-360)\n   density: number;         // in kg/m³\n-  weatherCode?: number;    // weather condition code\n-  precipitationProbability?: number; // chance of precipitation (0-100)\n-  cloudCover?: number;     // percentage of sky covered by clouds (0-100)\n }\n \n export interface ShotAdjustments {\n   distanceAdjustment: number;  // percentage\n"
                },
                {
                    "date": 1736987281124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   pressure: number;        // in hPa\n   altitude: number;        // in feet\n   windSpeed: number;       // in mph\n   windDirection: number;   // in degrees (0-360)\n-  density: number;         // in kg/m³\n+  density?: number;         // in kg/m³ (optional for input)\n }\n \n export interface ShotAdjustments {\n   distanceAdjustment: number;  // percentage\n"
                }
            ],
            "date": 1736980415762,
            "name": "Commit-0",
            "content": "export interface EnvironmentalConditions {\n  temperature: number;      // in Fahrenheit\n  humidity: number;        // percentage\n  pressure: number;        // in hPa\n  altitude: number;        // in feet\n  windSpeed: number;       // in mph\n  windDirection: number;   // in degrees (0-360)\n  density: number;         // in kg/m³\n  weatherCode?: number;    // weather condition code\n  precipitationProbability?: number; // chance of precipitation (0-100)\n  cloudCover?: number;     // percentage of sky covered by clouds (0-100)\n}\n\nexport interface ShotAdjustments {\n  distanceAdjustment: number;  // percentage\n  trajectoryShift: number;     // in yards\n  spinAdjustment: number;      // percentage\n  launchAngleAdjustment: number; // in degrees\n}\n\nexport class EnvironmentalCalculator {\n  private static readonly STANDARD_TEMP = 59;  // °F\n  private static readonly STANDARD_PRESSURE = 1013.25;  // hPa\n  private static readonly STANDARD_DENSITY = 1.225;  // kg/m³\n\n  static calculateAirDensity(conditions: Partial<EnvironmentalConditions>): number {\n    const tempC = (conditions.temperature! - 32) * 5/9;\n    const vaporPressure = this.calculateVaporPressure(conditions.temperature!, conditions.humidity!);\n    const dryPressure = conditions.pressure! - vaporPressure;\n    \n    // Using the ideal gas law with corrections for humidity\n    const density = (dryPressure * 100) / (287.05 * (tempC + 273.15)) +\n                   (vaporPressure * 100) / (461.495 * (tempC + 273.15));\n    \n    return density;\n  }\n\n  static calculateVaporPressure(tempF: number, humidity: number): number {\n    const tempC = (tempF - 32) * 5/9;\n    // Magnus formula for saturation vapor pressure\n    const saturationPressure = 6.1078 * Math.exp((17.27 * tempC) / (tempC + 237.3));\n    return (humidity / 100) * saturationPressure;\n  }\n\n  static calculateWindEffect(windSpeed: number, windDirection: number, shotDirection: number): {\n    headwind: number;\n    crosswind: number;\n  } {\n    const relativeAngle = (windDirection - shotDirection) * Math.PI / 180;\n    return {\n      headwind: windSpeed * Math.cos(relativeAngle),\n      crosswind: windSpeed * Math.sin(relativeAngle)\n    };\n  }\n\n  static calculateShotAdjustments(\n    conditions: EnvironmentalConditions,\n    shotDirection: number = 0\n  ): ShotAdjustments {\n    const densityRatio = conditions.density / this.STANDARD_DENSITY;\n    const wind = this.calculateWindEffect(conditions.windSpeed, conditions.windDirection, shotDirection);\n    \n    // Calculate distance adjustment based on air density and wind\n    const densityEffect = (1 - densityRatio) * 100; // Percentage change\n    const windEffect = -wind.headwind * 1.5; // Approximate 1.5% per mph headwind\n    const distanceAdjustment = densityEffect + windEffect;\n\n    // Calculate trajectory shift from crosswind\n    const trajectoryShift = wind.crosswind * 2; // Approximate 2 yards per mph crosswind\n\n    // Spin adjustment based on air density\n    const spinAdjustment = (densityRatio - 1) * -50; // Less spin in thinner air\n\n    // Launch angle adjustment for wind conditions\n    const launchAngleAdjustment = wind.headwind * 0.1; // Slight adjustment for wind\n\n    return {\n      distanceAdjustment,\n      trajectoryShift,\n      spinAdjustment,\n      launchAngleAdjustment\n    };\n  }\n\n  static calculateAltitudeEffect(altitude: number): number {\n    // Approximately 2% increase in distance per 1000ft of elevation\n    return (altitude / 1000) * 2;\n  }\n\n  static getFlightTimeAdjustment(conditions: EnvironmentalConditions): number {\n    const densityRatio = conditions.density / this.STANDARD_DENSITY;\n    // Flight time increases in thinner air\n    return 1 + ((1 - densityRatio) * 0.1);\n  }\n\n  static getRecommendedAdjustments(conditions: EnvironmentalConditions): string[] {\n    const recommendations: string[] = [];\n    const wind = this.calculateWindEffect(conditions.windSpeed, conditions.windDirection, 0);\n\n    if (Math.abs(wind.headwind) > 5) {\n      recommendations.push(wind.headwind > 0\n        ? \"Into wind: Club up and swing easier for better control\"\n        : \"Downwind: Club down and be aware of reduced spin/control\");\n    }\n\n    if (Math.abs(wind.crosswind) > 5) {\n      recommendations.push(\"Significant crosswind: Allow for shot shape into the wind\");\n    }\n\n    if (conditions.temperature < 50) {\n      recommendations.push(\"Cold conditions: Ball will fly shorter, consider clubbing up\");\n    }\n\n    if (conditions.humidity > 80) {\n      recommendations.push(\"High humidity: Ball will fly slightly shorter\");\n    }\n\n    if (conditions.altitude > 3000) {\n      recommendations.push(\"High altitude: Ball will fly further, consider clubbing down\");\n    }\n\n    return recommendations;\n  }\n\n  static getEnvironmentalSummary(conditions: EnvironmentalConditions): string {\n    const adjustments = this.calculateShotAdjustments(conditions);\n    const altitudeEffect = this.calculateAltitudeEffect(conditions.altitude);\n\n    return `\n      Playing conditions will affect your shots as follows:\n      • Distance: ${adjustments.distanceAdjustment > 0 ? 'Increase' : 'Decrease'} by ${Math.abs(adjustments.distanceAdjustment).toFixed(1)}%\n      • Ball flight: ${Math.abs(adjustments.trajectoryShift).toFixed(1)} yards ${adjustments.trajectoryShift > 0 ? 'right' : 'left'}\n      • Altitude effect: +${altitudeEffect.toFixed(1)}% carry distance\n      • Spin rate: ${adjustments.spinAdjustment > 0 ? 'Increased' : 'Decreased'} effect\n    `.trim();\n  }\n}\n"
        }
    ]
}